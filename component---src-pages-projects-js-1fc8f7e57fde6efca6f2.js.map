{"version":3,"sources":["webpack:///./src/components/post-link.js","webpack:///./src/pages/projects.js","webpack:///./src/components/tag.js","webpack:///(webpack)/buildin/module.js"],"names":["PostLink","post","className","to","fields","slug","frontmatter","thumbnail","fluid","childImageSharp","alt","title","tags","date","ProjectsPage","data","siteTitle","site","siteMetadata","Posts","allMarkdownRemark","edges","filter","edge","node","map","key","id","props","query","render","location","Tags","this","tag","_","kebabCase","Component","module","exports","webpackPolyfill","deprecate","paths","children","Object","defineProperty","enumerable","get","l","i"],"mappings":"4NAyBeA,EApBE,SAAC,GAAD,IAAGC,EAAH,EAAGA,KAAH,OACf,6BAASC,UAAU,cACjB,kBAAC,IAAD,CAAMC,GAAIF,EAAKG,OAAOC,QACjBJ,EAAKK,YAAYC,WAClB,kBAAC,IAAD,CAAKC,MAAOP,EAAKK,YAAYC,UAAUE,gBAAgBD,MAAOE,IAAKT,EAAKK,YAAYK,MAAOT,UAAU,qBAGzG,gCACE,6BACE,kBAAC,IAAD,CAAMU,KAAMX,EAAKK,YAAYM,QAE/B,wBAAIV,UAAU,mBACZ,kBAAC,IAAD,CAAMC,GAAIF,EAAKG,OAAOC,KAAMH,UAAU,kBACnCD,EAAKK,YAAYK,QAGtB,yBAAKT,UAAU,kBAAkBD,EAAKK,YAAYO,SCRlDC,G,8BAAe,SAAC,GAAa,IAAXC,EAAU,EAAVA,KAChBC,EAAYD,EAAKE,KAAKC,aAAaP,MAEnCQ,EAAQJ,EAAKK,kBAAkBC,MACpCC,QAAO,SAAAC,GAAI,QAAMA,EAAKC,KAAKlB,YAAYO,QACvCY,KAAI,SAAAF,GAAI,OAAI,kBAAC,EAAD,CAAUG,IAAKH,EAAKC,KAAKG,GAAI1B,KAAMsB,EAAKC,UAErD,OACE,kBAAC,IAAD,CAAQb,MAAOK,GACb,kBAAC,IAAD,CACEL,MAAM,aAER,6BAAST,UAAU,4CACjB,yBAAKA,UAAU,IACjB,wCACA,yBAAKA,UAAU,cACZiB,QA0CM,mBAAAS,GAAK,OAClB,kBAAC,IAAD,CACEC,MApCY,YAqCZC,OAAQ,SAAAf,GAAI,OACV,kBAAC,EAAD,eAAcgB,SAAUH,EAAMG,SAAUhB,KAAMA,GAAUa,S,wGCvExDI,E,kGACJF,OAAA,WAAU,IACAlB,EAASqB,KAAKL,MAAdhB,KACR,OACE,yBAAKV,UAAU,kBACZU,GACCA,EAAKa,KAAI,SAAAS,GAAG,OACV,0BAAMR,IAAKQ,GACX,kBAAC,IAAD,CAAMhC,UAAU,qBAChBwB,IAAKQ,EAEL/B,GAAE,SAAWgC,IAAEC,UAAUF,IAHzB,IAKEA,GAED,U,GAfMG,aAsBJL,O,mBC1BfM,EAAOC,QAAU,SAASD,GAoBzB,OAnBKA,EAAOE,kBACXF,EAAOG,UAAY,aACnBH,EAAOI,MAAQ,GAEVJ,EAAOK,WAAUL,EAAOK,SAAW,IACxCC,OAAOC,eAAeP,EAAQ,SAAU,CACvCQ,YAAY,EACZC,IAAK,WACJ,OAAOT,EAAOU,KAGhBJ,OAAOC,eAAeP,EAAQ,KAAM,CACnCQ,YAAY,EACZC,IAAK,WACJ,OAAOT,EAAOW,KAGhBX,EAAOE,gBAAkB,GAEnBF,I","file":"component---src-pages-projects-js-1fc8f7e57fde6efca6f2.js","sourcesContent":["import React from \"react\"\nimport { Link } from \"gatsby\"\nimport Img from \"gatsby-image\"\nimport Tags from \"./tag\"\n\nconst PostLink = ({ post }) => (\n  <article className=\"card-blog \">\n    <Link to={post.fields.slug}>\n      {!!post.frontmatter.thumbnail && (\n        <Img fluid={post.frontmatter.thumbnail.childImageSharp.fluid} alt={post.frontmatter.title} className=\"post-blog-image\"/>\n      )}\n    </Link>\n    <header>\n      <div>\n        <Tags tags={post.frontmatter.tags}/>\n      </div>\n      <h2 className=\"post-title-blog\">\n        <Link to={post.fields.slug} className=\"post-link-blog\">\n          {post.frontmatter.title}\n        </Link>\n      </h2>\n      <div className=\"post-meta-blog\">{post.frontmatter.date}</div>\n    </header>\n  </article>\n)\nexport default PostLink\n\n\n","import React from \"react\"\nimport { graphql, StaticQuery } from \"gatsby\"\nimport Img from \"gatsby-image\"\n\nimport Layout from \"../components/layout\"\nimport SEO from \"../components/seo\"\nimport PostLink from \"../components/post-link\"\n\nimport \"katex/dist/katex.min.css\"\n\nimport \"../style/normalize.css\"\nimport \"../style/all.scss\"\n\nconst ProjectsPage = ({ data }) =>{\n  const siteTitle = data.site.siteMetadata.title\n\n  const Posts = data.allMarkdownRemark.edges\n  .filter(edge => !!edge.node.frontmatter.date) // You can filter your posts based on some criteria\n  .map(edge => <PostLink key={edge.node.id} post={edge.node} />)\n\n  return (\n    <Layout title={siteTitle}>\n      <SEO\n        title=\"Projects\"\n      />\n      <article className=\"post-content-blog page-template no-image\">\n        <div className=\"\">\n      <h2>Projects</h2>\n      <div className=\"grids-blog\">\n        {Posts}\n      </div>\n      </div>\n      </article>\n    </Layout>\n  )\n}\n\nconst indexQuery = graphql`\n  query {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    allMarkdownRemark(filter: {fileAbsolutePath: {regex: \"/(projects)/\"  }}, sort: { fields: [frontmatter___date], order: DESC }) {\n      edges {\n        node {\n          id\n          fields {\n            slug\n          }\n          excerpt(pruneLength: 250)\n          frontmatter {\n            date(formatString: \"MMMM DD, YYYY\")\n            title\n            tags\n            description\n            thumbnail {\n              childImageSharp {\n                fluid(maxWidth: 1360) {\n                  ...GatsbyImageSharpFluid\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n`\n\nexport default props => (\n  <StaticQuery\n    query={indexQuery}\n    render={data => (\n      <ProjectsPage location={props.location} data={data} {...props} />\n    )}\n  />\n)\n","import React, { Component } from \"react\";\nimport _ from \"lodash\";\nimport { Link } from \"gatsby\";\n\nclass Tags extends Component {\n  render() {\n    const { tags } = this.props;\n    return (\n      <div className=\"post-card-tags\">\n        {tags &&\n          tags.map(tag => (\n            <span key={tag}>\n            <Link className=\"post-card-tag-link\"\n            key={tag}\n            // style={{ textDecoration: \"none\" }}\n            to={`/tags/${_.kebabCase(tag)}`}\n            >\n            #{tag}\n            </Link>\n            {\" \"}</span>\n          ))}\n      </div>\n    );\n  }\n}\n\nexport default Tags;","module.exports = function(module) {\n\tif (!module.webpackPolyfill) {\n\t\tmodule.deprecate = function() {};\n\t\tmodule.paths = [];\n\t\t// module.parent = undefined by default\n\t\tif (!module.children) module.children = [];\n\t\tObject.defineProperty(module, \"loaded\", {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn module.l;\n\t\t\t}\n\t\t});\n\t\tObject.defineProperty(module, \"id\", {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn module.i;\n\t\t\t}\n\t\t});\n\t\tmodule.webpackPolyfill = 1;\n\t}\n\treturn module;\n};\n"],"sourceRoot":""}