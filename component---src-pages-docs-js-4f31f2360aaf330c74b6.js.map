{"version":3,"sources":["webpack://ruben-gerritsen-website/./src/pages/docs.js"],"names":["AboutPage","location","data","treeData","useState","edges","allMarkdownRemark","originalData","length","items","reduce","accu","node","slug","fields","title","frontmatter","parts","slice","split","prevItems","part","tmp","find","label","push","existingItem","url","keywords","className","map","child","key","href","item","props","StaticQuery","query","render"],"mappings":"ghCAOA,IAoDMA,EAAY,SAAC,EAAUC,GAAc,IAAtBC,EAAqB,EAArBA,KACZC,GAAYC,eAAS,WAC1B,OAtDsBC,EAsDGH,EAAKI,kBAAkBD,MAnDtB,KAFtBE,EAAeF,GAEJG,OACR,CAAEC,MAAO,IAGLF,EAAaG,QACxB,SACEC,EADF,GAWE,IAHI,IAGJ,EAHG,IALDC,KACYC,EAIX,EAJCC,OAAUD,KACKE,EAGhB,EAHCC,YAAeD,MAIbE,EAAQJ,EAAKK,MAAM,GAAI,GAAGC,MAAM,KACzBC,EAAcT,EAArBF,MAFH,iBAGQY,EAHR,QAIGC,EAAMF,EAAUG,MAAK,qBAAGC,QAAsBH,KAC9CC,EACGA,EAAIb,QACPa,EAAIb,MAAQ,KAGda,EAAM,CAAEE,MAAOH,EAAMZ,MAAO,IAC5BW,EAAUK,KAAKH,IAEjBF,EAAYE,EAAIb,OAVlB,IAAmBQ,EAAMC,MAAM,GAAI,MAAnC,aAAwC,IAYxC,IAAMQ,EAAeN,EAAUG,MAC7B,qBAAGC,QAAsBP,EAAMA,EAAMT,OAAS,MAahD,OAXIkB,GACFA,EAAaC,IAAMd,EACnBa,EAAaX,MAAQA,GAErBK,EAAUK,KAAK,CACbD,MAAOP,EAAMA,EAAMT,OAAS,GAC5BmB,IAAKd,EACLJ,MAAO,GACPM,UAGGJ,IAET,CAAEF,MAAO,KA/Ca,IAAAJ,EAClBE,KAoDN,GAIA,OACE,QAAC,IAAD,MACE,QAAC,IAAD,CAAKQ,MAAM,OAAOa,SAAU,CAAC,wBAC7B,mBAASC,UAAS,0BAChB,cAAIA,UAAU,mBAAd,sBACA,0BACA,eAAKA,UAAU,sCACb,kBACG1B,EAASM,MAAMqB,KAAI,SAAAC,GAAK,OACvB,cAAIC,IAAKD,EAAMJ,MACb,aAAGM,KAAMF,EAAMJ,KAAMI,EAAMhB,QAC3B,kBACGgB,EAAMtB,MAAMqB,KAAI,SAAAI,GAAI,OACnB,mBACE,aAAGD,KAAMC,EAAKP,KAAMO,EAAKnB,qBAsC/C,mBAAeoB,GAAK,OAClB,QAAC,EAAAC,YAAD,CACEC,MA3BY,YA4BZC,OAAQ,SAAApC,GAAI,OACV,QAACF,GAAD,QAAWC,SAAUkC,EAAMlC,SAAUC,KAAMA,GAAUiC","file":"component---src-pages-docs-js-4f31f2360aaf330c74b6.js","sourcesContent":["import { graphql, StaticQuery } from \"gatsby\"\nimport React, { useState } from \"react\"\nimport DocsLayout from \"../components/layouts/docs_layout.js\"\nimport SEO from \"../components/SEO\"\n// Import theme\nimport \"../style/all.scss\"\n\nconst calculateTreeData = edges => {\n  const originalData = edges\n\n  if (originalData.length === 0) {\n    return { items: [] }\n  }\n\n  const tree = originalData.reduce(\n    (\n      accu,\n      {\n        node: {\n          fields: { slug },\n          frontmatter: { title },\n        },\n      }\n    ) => {\n      const parts = slug.slice(1, -1).split(\"/\")\n      let { items: prevItems } = accu\n      for (const part of parts.slice(1, -1)) {\n        let tmp = prevItems.find(({ label }) => label === part)\n        if (tmp) {\n          if (!tmp.items) {\n            tmp.items = []\n          }\n        } else {\n          tmp = { label: part, items: [] }\n          prevItems.push(tmp)\n        }\n        prevItems = tmp.items\n      }\n      const existingItem = prevItems.find(\n        ({ label }) => label === parts[parts.length - 1]\n      )\n      if (existingItem) {\n        existingItem.url = slug\n        existingItem.title = title\n      } else {\n        prevItems.push({\n          label: parts[parts.length - 1],\n          url: slug,\n          items: [],\n          title,\n        })\n      }\n      return accu\n    },\n    { items: [] }\n  )\n  return tree\n}\n\nconst AboutPage = ({ data }, location) => {\n  const [treeData] = useState(() => {\n    return calculateTreeData(data.allMarkdownRemark.edges)\n  })\n\n  return (\n    <DocsLayout>\n      <SEO title=\"Docs\" keywords={[\"table of contents\"]} />\n      <article className={`post-content no-image`}>\n        <h1 className=\"post-title-docs\">Table Of Contents</h1>\n        <hr-title />\n        <div className=\"post-content-body tableOfContents\">\n          <ul>\n            {treeData.items.map(child => (\n              <li key={child.url}>\n                <a href={child.url}>{child.title}</a>\n                <ul>\n                  {child.items.map(item => (\n                    <li>\n                      <a href={item.url}>{item.title}</a>\n                    </li>\n                  ))}\n                </ul>\n              </li>\n            ))}\n          </ul>\n        </div>\n      </article>\n    </DocsLayout>\n  )\n}\n\nconst indexQuery = graphql`\n  query {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    allMarkdownRemark(\n      filter: { fileAbsolutePath: { regex: \"/(docs)/\" } }\n      sort: { fields: [fields___slug], order: ASC }\n    ) {\n      edges {\n        node {\n          fields {\n            slug\n          }\n          frontmatter {\n            title\n          }\n        }\n      }\n    }\n  }\n`\n\nexport default props => (\n  <StaticQuery\n    query={indexQuery}\n    render={data => (\n      <AboutPage location={props.location} data={data} {...props} />\n    )}\n  />\n)\n"],"sourceRoot":""}