{"componentChunkName":"component---src-templates-doc-post-js","path":"/docs/python/02_Python_basics/","result":{"data":{"site":{"siteMetadata":{"title":"rubengerritsen.nl","author":"Ruben Gerritsen"}},"markdownRemark":{"id":"a57555d2-ee0f-5f85-9a3d-2091b62a14de","excerpt":"Introduction This is the first of our python tutorials on Canvas for 2MMN40. These tutorials are not meant as a complete reference. What they will give you is a…","html":"<h1 id=\"introduction\" style=\"position:relative;\"><a href=\"#introduction\" aria-label=\"introduction permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Introduction</h1>\n<p>This is the first of our python tutorials on Canvas for 2MMN40. These tutorials are not meant as a complete reference. What they will give you is a quick overview of almost everything you need from python for this course. They should save you some time googling. You probably still need to google some details after these tutorials, but at least you know what to google for. Furthermore, if you work through this basic tutorial and our NumPy tutorial you will have seen all data structures that you might need in the course. </p>\n<p>As with any other programming tutorial the quickest way of learning is doing. Open spyder and simply try out every example. It is even better if you already try to change and modify the examples to see how far you can stretch the use of some commands.</p>\n<blockquote>\n<p>Tip: The quickest way to test a few commands or a function is to type them in the interactive python console of spyder, for small pieces of code you do not need the text editor.</p>\n</blockquote>\n<h1 id=\"basic-python\" style=\"position:relative;\"><a href=\"#basic-python\" aria-label=\"basic python permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Basic Python</h1>\n<h2 id=\"lists\" style=\"position:relative;\"><a href=\"#lists\" aria-label=\"lists permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Lists</h2>\n<p>The basic building block in python is the <code class=\"language-text\">list</code>. Lists are collections of data. Lets create a list of numbers called <code class=\"language-text\">lst</code>:</p>\n<blockquote>\n<p>Notation: I will prepend <code class=\"language-text\">&gt;&gt;&gt;</code> to all the lines of code you could type into the console. The line after it will be output. If you encounter a code block without any <code class=\"language-text\">&gt;&gt;&gt;</code> you should copy paste it in the text editor and press play.</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> lst <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span><span class=\"token number\">7</span><span class=\"token punctuation\">]</span></code></pre></div>\n<p>We can access elements in a list with an index between square brackets, <code class=\"language-text\">lst[3]</code> for example will return 4. Note that <strong>indexing starts at zero!</strong></p>\n<p>We can also get a part of a list with the colon <code class=\"language-text\">[begin:end]</code>, this will give us all numbers from the begin index up to <em>but not including</em> the end index, an example: </p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> lst<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">:</span><span class=\"token number\">6</span><span class=\"token punctuation\">]</span> \n<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">]</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> lst<span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">2</span><span class=\"token punctuation\">:</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token comment\"># negative indices start at the end of a list</span>\n<span class=\"token punctuation\">[</span><span class=\"token number\">6</span><span class=\"token punctuation\">]</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> lst<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span> <span class=\"token comment\"># leaving the \"end\" part empty goes to the end of the list</span>\n<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span><span class=\"token number\">7</span><span class=\"token punctuation\">]</span></code></pre></div>\n<p>Lists can also be added,</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> lst2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span><span class=\"token number\">9</span><span class=\"token punctuation\">]</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> lst <span class=\"token operator\">+</span> lst2\n<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span><span class=\"token number\">9</span><span class=\"token punctuation\">]</span></code></pre></div>\n<p>lists have a length</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>lst<span class=\"token punctuation\">)</span>\n<span class=\"token number\">7</span></code></pre></div>\n<p>and we can append to a list.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> lst<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token string\">\"fiets\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> lst\n<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'fiets'</span><span class=\"token punctuation\">]</span></code></pre></div>\n<p>Note that we can mix types (i.e strings and integers in this case).</p>\n<h3 id=\"other-lists\" style=\"position:relative;\"><a href=\"#other-lists\" aria-label=\"other lists permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Other “Lists”</h3>\n<p>Most things behave like lists in python, as an example consider the following string and the following operations:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># there is no distinction between ' and \" in python</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> text <span class=\"token operator\">=</span> <span class=\"token string\">\"python crash\"</span> <span class=\"token operator\">+</span> <span class=\"token string\">' course'</span> \n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>text<span class=\"token punctuation\">)</span>\n<span class=\"token number\">19</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> text<span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">6</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span>\n<span class=\"token string\">'course'</span></code></pre></div>\n<p>Hence strings and lists can be used in the same way. A list also doesn’t have to contain numbers it can contain all kind of things. We can print the items in a list one by one in a for-loop.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">things <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'bicycle'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token keyword\">for</span> item <span class=\"token keyword\">in</span> things<span class=\"token punctuation\">:</span>\n  <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"done\"</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>To make python understand which parts of the code are part of the for-loop we use indentation, everything with the same indentation level is part of that for-loop.</p>\n<blockquote>\n<p>The reason almost all python objects behave like lists is that they all follow the same data model. If you really like to know the details of python you can check out the data model <a href=\"https://docs.python.org/3/reference/datamodel.html\">here</a>. Note however that the documentation might be a bit overwhelming if you are relatively new to programming.</p>\n</blockquote>\n<h2 id=\"dictionaries\" style=\"position:relative;\"><a href=\"#dictionaries\" aria-label=\"dictionaries permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Dictionaries</h2>\n<p>Python has another very useful and basic data structure, the so called dictionary. A dictionary is a map from strings to elements. The elements can be anything, strings, floats, integers, objects etc. A dictionary is enclosed in curly braces, an example </p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">massDict <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token string\">'H'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1.0080</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'O'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">15.9994</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'C'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">12.0110</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">.</span></code></pre></div>\n<p>We can use the dictionary <code class=\"language-text\">massDict[&#39;H&#39;]</code> and it will give us the mass of the hydrogen molecule, i.e. <code class=\"language-text\">massDict[&#39;H&#39;] == 1.0080</code>. Another (cliche) example is that of a phonebook</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">phonebook <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token string\">'TU/e'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"040 247 9111\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Alice'</span> <span class=\"token punctuation\">:</span> <span class=\"token string\">\"0621212121\"</span><span class=\"token punctuation\">}</span></code></pre></div>\n<p>if we want the TU/e number we can simply type <code class=\"language-text\">phonebook[&#39;TU/e&#39;]</code>.</p>\n<blockquote>\n<p>For those of you who like computer science: a python dictionary is simply a hash table.</p>\n</blockquote>\n<h3 id=\"adding-elements-to-a-dictionary\" style=\"position:relative;\"><a href=\"#adding-elements-to-a-dictionary\" aria-label=\"adding elements to a dictionary permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Adding elements to a dictionary</h3>\n<p>Adding elements is as simple as <code class=\"language-text\">massDict[&#39;N&#39;] = 14.0067</code>. The <code class=\"language-text\">massDict</code> now containts <code class=\"language-text\">{&#39;H&#39;: 1.008, &#39;O&#39;: 15.9994, &#39;C&#39;: 12.011, &#39;N&#39;: 14.0067}</code>.</p>\n<h2 id=\"basic-math\" style=\"position:relative;\"><a href=\"#basic-math\" aria-label=\"basic math permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Basic Math</h2>\n<p>All math operators behave as expected <code class=\"language-text\">+</code> will add things, <code class=\"language-text\">*</code> will multiply things etc., but <code class=\"language-text\">^</code> is reserved for bitwise <code class=\"language-text\">XOR</code>, if we want 2 to the power of 2 we need to do <code class=\"language-text\">2 ** 2</code>. </p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token number\">2</span> <span class=\"token operator\">**</span> <span class=\"token number\">2</span>\n<span class=\"token number\">4</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token number\">3</span> <span class=\"token operator\">+</span> <span class=\"token number\">4</span> <span class=\"token operator\">-</span> <span class=\"token number\">2</span>\n<span class=\"token number\">5</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token punctuation\">(</span><span class=\"token number\">3</span> <span class=\"token operator\">**</span><span class=\"token number\">2</span> <span class=\"token operator\">+</span> <span class=\"token number\">4</span> <span class=\"token operator\">**</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">**</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n<span class=\"token number\">5.0</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> listOfNumbers <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token builtin\">sum</span><span class=\"token punctuation\">(</span>listOfNumbers<span class=\"token punctuation\">)</span>\n<span class=\"token number\">6</span></code></pre></div>\n<h2 id=\"control-statements\" style=\"position:relative;\"><a href=\"#control-statements\" aria-label=\"control statements permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Control Statements</h2>\n<p>Python has all normal control statements, <code class=\"language-text\">if</code>, <code class=\"language-text\">for</code> and <code class=\"language-text\">while</code>. The control statments all have the same form, it is the name of the control statement followed by some condition and then a colon (<code class=\"language-text\">name condition:</code>), every bit of code that is part of a block in the control statement should be indented. Note that I like to use two spaces for indentation, the python standard is four.</p>\n<h3 id=\"if-statement\" style=\"position:relative;\"><a href=\"#if-statement\" aria-label=\"if statement permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>if statement</h3>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">number <span class=\"token operator\">=</span> <span class=\"token number\">4</span>\n<span class=\"token keyword\">if</span> number <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n  <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"smaller than zero\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">elif</span> number <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># else if = elif in python</span>\n  <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"number equals zero\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n  <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"number is larger than zero\"</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h3 id=\"for-loop\" style=\"position:relative;\"><a href=\"#for-loop\" aria-label=\"for loop permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>for loop</h3>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n  j <span class=\"token operator\">=</span> i <span class=\"token operator\">**</span> <span class=\"token number\">2</span>\n  <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>j<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"no longer part of the for-loop\"</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h3 id=\"for-loop-with-range\" style=\"position:relative;\"><a href=\"#for-loop-with-range\" aria-label=\"for loop with range permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>for loop with range</h3>\n<p>Instead of writing out the list we want to iterate over, there is a shortcut, the <code class=\"language-text\">range()</code> function, run it and see if the output is what you expected. You should note something “strange” about the range function!</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  j <span class=\"token operator\">=</span> i <span class=\"token operator\">**</span> <span class=\"token number\">2</span>\n  <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>j<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"no longer part of the for-loop\"</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>A bit more on the range function, try to run</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># and run the next few lines in the interactive console</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Note how range behaves the same as the indexing for lists, i.e. <code class=\"language-text\">[begin:end]</code>.</p>\n<h3 id=\"while-statement\" style=\"position:relative;\"><a href=\"#while-statement\" aria-label=\"while statement permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>while statement</h3>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">i <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n<span class=\"token keyword\">while</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">:</span>\n  <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span>\n  i <span class=\"token operator\">=</span> i <span class=\"token operator\">+</span> <span class=\"token number\">1</span></code></pre></div>\n<h2 id=\"functions\" style=\"position:relative;\"><a href=\"#functions\" aria-label=\"functions permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Functions</h2>\n<p>Defining functions in python is straightforward</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">square</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  square <span class=\"token operator\">=</span> x <span class=\"token operator\">*</span> x\n  <span class=\"token keyword\">return</span> square\n\nsquare<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>once again everything that has the same indentation level is part of the function.</p>\n<h3 id=\"different-argument-types\" style=\"position:relative;\"><a href=\"#different-argument-types\" aria-label=\"different argument types permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Different argument types</h3>\n<p>Python functions can have two types of arguments. There are “normal” (positional) arguments and so called keyword arguments (often abbreviated to kwargs). Normal arguments depend on their position between the parantheses, keyword arguments depend on their name and can be used to define defaults. An example</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">isApproxEqual</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> error <span class=\"token operator\">=</span> <span class=\"token number\">1e</span><span class=\"token operator\">-</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  <span class=\"token keyword\">return</span> <span class=\"token builtin\">abs</span><span class=\"token punctuation\">(</span>a<span class=\"token operator\">-</span>b<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> error\n\n<span class=\"token comment\"># now error has a default value of 1e-2</span>\n<span class=\"token comment\"># we can use the function without specifying it</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> isApproxEqual<span class=\"token punctuation\">(</span><span class=\"token number\">1.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1.001</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># or overwrite the default value either positional or with it's name</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> isApproxEqual<span class=\"token punctuation\">(</span><span class=\"token number\">1.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1.001</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1e</span><span class=\"token operator\">-</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> isApproxEqual<span class=\"token punctuation\">(</span><span class=\"token number\">1.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1.001</span><span class=\"token punctuation\">,</span> error<span class=\"token operator\">=</span><span class=\"token number\">1e</span><span class=\"token operator\">-</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># These two statements are equivalent, but the latter is preferred</span>\n<span class=\"token comment\"># because it is easier to read/understand.</span></code></pre></div>\n<p>Another example, now to show how the kwargs depend on there name.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">keywordArguments</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> y<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> z<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"x: </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>x<span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"y: </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>y<span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"z: </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>z<span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span>\n\nkeywordArguments<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nkeywordArguments<span class=\"token punctuation\">(</span>z<span class=\"token operator\">=</span><span class=\"token number\">50</span><span class=\"token punctuation\">)</span>\nkeywordArguments<span class=\"token punctuation\">(</span>y<span class=\"token operator\">=</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span> z<span class=\"token operator\">=</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span> x<span class=\"token operator\">=</span><span class=\"token number\">9</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>If you want to mix positional and keyword arguments you need to provide all positional arguments before any keyword arguments. Doing otherwise will result in an error in the interpreter. </p>\n<h3 id=\"multiple-return-values\" style=\"position:relative;\"><a href=\"#multiple-return-values\" aria-label=\"multiple return values permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Multiple return values</h3>\n<p>In most programming languages it is not possible (or not allowed) to return multiple return values. In python, however, it is allowed and done fairly often. What you do is return a <em>tuple</em> and you need to <em>unpack</em> that tuple if you want to access its separate values. In its simplest form:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">iReturnMultipleThings</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  <span class=\"token triple-quoted-string string\">\"\"\"returns an int, string and list, all at the same time. \"\"\"</span>\n  <span class=\"token comment\"># a tuple is a comma seperated list surrounded by </span>\n  <span class=\"token comment\"># parantheses (e.g. (.., .., ..))</span>\n  <span class=\"token keyword\">return</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"fiets\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># \"unpacking\" is done with a comma seperated list of variables</span>\n<span class=\"token comment\"># that is as long as the tuple</span>\nnumber<span class=\"token punctuation\">,</span> text<span class=\"token punctuation\">,</span> lst <span class=\"token operator\">=</span> iReturnMultipleThings<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>number<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>text<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>lst<span class=\"token punctuation\">)</span></code></pre></div>","tableOfContents":"<ul>\n<li><a href=\"/docs/python/02_Python_basics/#introduction\">Introduction</a></li>\n<li>\n<p><a href=\"/docs/python/02_Python_basics/#basic-python\">Basic Python</a></p>\n<ul>\n<li><a href=\"/docs/python/02_Python_basics/#lists\">Lists</a></li>\n<li><a href=\"/docs/python/02_Python_basics/#dictionaries\">Dictionaries</a></li>\n<li><a href=\"/docs/python/02_Python_basics/#basic-math\">Basic Math</a></li>\n<li><a href=\"/docs/python/02_Python_basics/#control-statements\">Control Statements</a></li>\n<li><a href=\"/docs/python/02_Python_basics/#functions\">Functions</a></li>\n</ul>\n</li>\n</ul>","fields":{"slug":"/docs/python/02_Python_basics/"},"frontmatter":{"title":"Basic Python, Lists, Strings, Math, Controlstatements and Functions","date":null,"description":"A minimal overview of the basic python features."}},"allMarkdownRemark":{"totalCount":24,"edges":[{"node":{"excerpt":"Some Generic Description","fields":{"slug":"/docs/book1/"},"frontmatter":{"date":null,"title":"Book 1","description":"Lorem Ipsum","tags":["Book"]}}},{"node":{"excerpt":"Some Generic Description","fields":{"slug":"/docs/book2/"},"frontmatter":{"date":null,"title":"Book 2","description":"Lorem Ipsum","tags":["Book"]}}},{"node":{"excerpt":"First Part Vivamus lectus ligula, facilisis in mauris nec, interdum dapibus ligula. Maecenas pellentesque tristique ante quis eleifend…","fields":{"slug":"/docs/book1/introduction/"},"frontmatter":{"date":null,"title":"Introduction","description":"Lorem Ipsum","tags":["markdown","math","floats"]}}},{"node":{"excerpt":"First Part Vivamus lectus ligula, facilisis in mauris nec, interdum dapibus ligula. Maecenas pellentesque tristique ante quis eleifend…","fields":{"slug":"/docs/book1/second/"},"frontmatter":{"date":null,"title":"Second Chapter","description":"Lorem Ipsum","tags":["markdown","math","floats"]}}},{"node":{"excerpt":"First Part Vivamus lectus ligula, facilisis in mauris nec, interdum dapibus ligula. Maecenas pellentesque tristique ante quis eleifend…","fields":{"slug":"/docs/book1/third/"},"frontmatter":{"date":null,"title":"Third Chapter","description":"Lorem Ipsum","tags":["markdown","math","floats"]}}},{"node":{"excerpt":"First Part Vivamus lectus ligula, facilisis in mauris nec, interdum dapibus ligula. Maecenas pellentesque tristique ante quis eleifend…","fields":{"slug":"/docs/book2/introduction/"},"frontmatter":{"date":null,"title":"Introduction","description":"Lorem Ipsum","tags":["markdown","math","floats"]}}},{"node":{"excerpt":"First Part Vivamus lectus ligula, facilisis in mauris nec, interdum dapibus ligula. Maecenas pellentesque tristique ante quis eleifend…","fields":{"slug":"/docs/book2/second/"},"frontmatter":{"date":null,"title":"Second Chapter","description":"Lorem Ipsum","tags":["markdown","math","floats"]}}},{"node":{"excerpt":"Introduction Now that you have a python setup, it is time to see what it can do. The following instructions will assume you have Anaconda…","fields":{"slug":"/docs/python/01_GettingToKnowYourPythonSetup/"},"frontmatter":{"date":null,"title":"Getting To Know Your Python Setup","description":"A quick overview of the spyder IDE and a first code example.","tags":["python","spyder","beginner"]}}},{"node":{"excerpt":"First Part Vivamus lectus ligula, facilisis in mauris nec, interdum dapibus ligula. Maecenas pellentesque tristique ante quis eleifend…","fields":{"slug":"/docs/book2/third/"},"frontmatter":{"date":null,"title":"Third Chapter","description":"Lorem Ipsum","tags":["markdown","math","floats"]}}},{"node":{"excerpt":"Some Generic Description","fields":{"slug":"/docs/python/"},"frontmatter":{"date":null,"title":"Python","description":"python","tags":["python"]}}},{"node":{"excerpt":"Introduction This is the first of our python tutorials on Canvas for 2MMN40. These tutorials are not meant as a complete reference. What…","fields":{"slug":"/docs/python/02_Python_basics/"},"frontmatter":{"date":null,"title":"Basic Python, Lists, Strings, Math, Controlstatements and Functions","description":"A minimal overview of the basic python features.","tags":["python","basics","programming"]}}},{"node":{"excerpt":"Introduction In this course we will build a Molecular Dynamics (MD) engine in python 3. On this page we will show you how to setup python…","fields":{"slug":"/docs/python/00_SettingUpPython/"},"frontmatter":{"date":null,"title":"Setting Up Python","description":"How to install python","tags":["install","python","anaconda"]}}},{"node":{"excerpt":"Vivamus lectus ligula, facilisis in mauris nec, interdum dapibus ligula. Maecenas pellentesque tristique ante quis eleifend. Aenean ac…","fields":{"slug":"/docs/book1/third/0codeblockSub/"},"frontmatter":{"date":null,"title":"3.1","description":"Lorem Ipsum","tags":["markdown","math","floats"]}}},{"node":{"excerpt":"Vivamus lectus ligula, facilisis in mauris nec, interdum dapibus ligula. Maecenas pellentesque tristique ante quis eleifend. Aenean ac…","fields":{"slug":"/docs/book1/second/0codeblockSub/"},"frontmatter":{"date":null,"title":"2.1","description":"Lorem Ipsum","tags":["markdown","math","floats"]}}},{"node":{"excerpt":"Vivamus lectus ligula, facilisis in mauris nec, interdum dapibus ligula. Maecenas pellentesque tristique ante quis eleifend. Aenean ac…","fields":{"slug":"/docs/book1/second/1codeblockSub/"},"frontmatter":{"date":null,"title":"2.2","description":"Lorem Ipsum","tags":["markdown","math","floats"]}}},{"node":{"excerpt":"Introduction NumPy is an extension of python specifically designed for doing numeric computations. The two main features of the package are…","fields":{"slug":"/docs/python/03_Numpy_basics/"},"frontmatter":{"date":null,"title":"Numpy Basics","description":"A brief overview of the most important numpy features for Scientific Computing.","tags":["python","numpy","spyder","basics"]}}},{"node":{"excerpt":"Vivamus lectus ligula, facilisis in mauris nec, interdum dapibus ligula. Maecenas pellentesque tristique ante quis eleifend. Aenean ac…","fields":{"slug":"/docs/book2/second/0codeblockSub/"},"frontmatter":{"date":null,"title":"2.1","description":"Lorem Ipsum","tags":["markdown","math","floats"]}}},{"node":{"excerpt":"File IO To start we need a file, copy paste the following into a file called  that you save in the same folder as your python script…","fields":{"slug":"/docs/python/Python_FileIO_StringFormatting/"},"frontmatter":{"date":null,"title":"File IO and String Formatting","description":"Basic FileIO with python","tags":["python","fileIO"]}}},{"node":{"excerpt":"Vivamus lectus ligula, facilisis in mauris nec, interdum dapibus ligula. Maecenas pellentesque tristique ante quis eleifend. Aenean ac…","fields":{"slug":"/docs/book2/second/1codeblockSub/"},"frontmatter":{"date":null,"title":"2.2","description":"Lorem Ipsum","tags":["markdown","math","floats"]}}},{"node":{"excerpt":"Options Parsing There might be a moment during this course in which you would like to specify options for your program. For example you…","fields":{"slug":"/docs/python/Python_OptionsAndInput/"},"frontmatter":{"date":null,"title":"Options Parsing","description":"Options parsing with python","tags":["xml","python","optionparsing"]}}},{"node":{"excerpt":"Vivamus lectus ligula, facilisis in mauris nec, interdum dapibus ligula. Maecenas pellentesque tristique ante quis eleifend. Aenean ac…","fields":{"slug":"/docs/book2/third/0codeblockSub/"},"frontmatter":{"date":null,"title":"3.1","description":"Lorem Ipsum","tags":["markdown","math","floats"]}}},{"node":{"excerpt":"Introduction As you start to write more and more code, it becomes important to organize that code. There are many ways to do this and many…","fields":{"slug":"/docs/python/Python_OrganizingALargeProject/"},"frontmatter":{"date":null,"title":"Organizing Code","description":"Functional and Procedural programming, python modules.","tags":["python","largeproject"]}}},{"node":{"excerpt":"Introduction Here we will discuss some basics of the software package named Visual Molecular\nDynamics (VMD). It can be used to make fancy…","fields":{"slug":"/docs/python/VMD_basics/"},"frontmatter":{"date":null,"title":"VMD A very basic tutorial","description":"VMD install and brief tutorial","tags":["vmd","molecules"]}}},{"node":{"excerpt":"Python Resources Here is a list of great sources of information for python, numpy and matplotlib. The Official Python Tutorial If you want a…","fields":{"slug":"/docs/python/Python_online_resources/"},"frontmatter":{"date":null,"title":"How to Learn Python Resources","description":"Sources to learn python","tags":["python","resources"]}}}]}},"pageContext":{"slug":"/docs/python/02_Python_basics/","previous":{"fields":{"slug":"/docs/python/00_SettingUpPython/"},"frontmatter":{"title":"Setting Up Python","tags":["install","python","anaconda"]}},"next":{"fields":{"slug":"/docs/python/"},"frontmatter":{"title":"Python","tags":["python"]}}}},"staticQueryHashes":["1163865869","63159454"]}