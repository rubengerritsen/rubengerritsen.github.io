{"version":3,"sources":["webpack:///./src/components/postCard.js","webpack:///./src/templates/tag-page.js","webpack:///./src/components/post-link.js","webpack:///./src/components/tag.js","webpack:///(webpack)/buildin/module.js"],"names":["Component","TagPageTemplate","render","props","this","tag","pageContext","Posts","data","allMarkdownRemark","edges","filter","edge","node","frontmatter","date","map","key","id","post","siteTitle","site","siteMetadata","title","location","charAt","toUpperCase","slice","keywords","className","totalCount","React","pageQuery","PostLink","to","fields","slug","thumbnail","fluid","childImageSharp","alt","tags","Tags","_","kebabCase","module","exports","webpackPolyfill","deprecate","paths","children","Object","defineProperty","enumerable","get","l","i"],"mappings":"yJAyB6BA,YAmCEA,a,wKCpDzBC,E,kGACJC,OAAA,WACE,IAAMC,EAAQC,KAAKD,MACbE,EAAMD,KAAKD,MAAMG,YAAYD,IAC7BE,EAAQH,KAAKD,MAAMK,KAAKC,kBAAkBC,MAC/CC,QAAO,SAAAC,GAAI,QAAMA,EAAKC,KAAKC,YAAYC,QACvCC,KAAI,SAAAJ,GAAI,OAAI,kBAAC,IAAD,CAAUK,IAAKL,EAAKC,KAAKK,GAAIC,KAAMP,EAAKC,UAC/CO,EAAYhB,KAAKD,MAAMK,KAAKa,KAAKC,aAAaC,MAEpD,OACE,kBAAC,IAAD,CAAQC,SAAUpB,KAAKD,MAAMqB,SAAUD,MAAOH,GAC5C,kBAAC,IAAD,CAEEG,MAAK,KAAMlB,EAAIoB,OAAO,GAAGC,cAAgBrB,EAAIsB,MAAM,IACnDC,SAAU,CAAC,GAAGvB,EAAJ,wCAEX,6BAASwB,UAAU,4CACpB,4BAAQA,UAAU,iBAChB,wBAAIA,UAAU,mBAAd,IAAkCxB,EAAlC,IAAwCF,EAAMK,KAAKC,kBAAkBqB,WAArE,MAEF,yBAAKD,UAAU,cACdtB,M,GArBqBwB,IAAM/B,WA6BrBC,YAER,IAAM+B,EAAS,Y,oCCvCtB,sEA+BeC,IApBE,SAAC,GAAD,IAAGd,EAAH,EAAGA,KAAH,OACf,6BAASU,UAAU,aACjB,kBAAC,IAAD,CAAMK,GAAIf,EAAKgB,OAAOC,QACjBjB,EAAKL,YAAYuB,WAClB,kBAAC,IAAD,CAAKC,MAAOnB,EAAKL,YAAYuB,UAAUE,gBAAgBD,MAAOE,IAAKrB,EAAKL,YAAYS,MAAOM,UAAU,qBAGzG,gCACE,6BACE,kBAAC,IAAD,CAAMY,KAAMtB,EAAKL,YAAY2B,QAE/B,wBAAIZ,UAAU,mBACZ,kBAAC,IAAD,CAAMK,GAAIf,EAAKgB,OAAOC,KAAMP,UAAU,kBACnCV,EAAKL,YAAYS,QAGtB,yBAAKM,UAAU,kBAAmBV,EAAKL,YAAYC,U,wGCvBnD2B,E,kGACJxC,OAAA,WAAU,IACAuC,EAASrC,KAAKD,MAAdsC,KACR,OACE,yBAAKZ,UAAU,kBACZY,GACCA,EAAKzB,KAAI,SAAAX,GAAG,OACV,0BAAMY,IAAKZ,GACX,kBAAC,IAAD,CAAMwB,UAAU,qBAChBZ,IAAKZ,EAEL6B,GAAE,SAAWS,IAAEC,UAAUvC,IAHzB,IAKEA,GAED,U,GAfML,aAsBJ0C,O,mBC1BfG,EAAOC,QAAU,SAASD,GAoBzB,OAnBKA,EAAOE,kBACXF,EAAOG,UAAY,aACnBH,EAAOI,MAAQ,GAEVJ,EAAOK,WAAUL,EAAOK,SAAW,IACxCC,OAAOC,eAAeP,EAAQ,SAAU,CACvCQ,YAAY,EACZC,IAAK,WACJ,OAAOT,EAAOU,KAGhBJ,OAAOC,eAAeP,EAAQ,KAAM,CACnCQ,YAAY,EACZC,IAAK,WACJ,OAAOT,EAAOW,KAGhBX,EAAOE,gBAAkB,GAEnBF","file":"component---src-templates-tag-page-js-e5fac0dd04ee0093c7f6.js","sourcesContent":["import React, { Component } from \"react\";\nimport { Link } from \"gatsby\"\nimport Tags from \"./tag\"\n\nexport default props => (\n  <article\n    className={`post-card ${props.count % 3 === 0 && `post-card-large`} ${\n      props.postClass\n    } ${props.node.frontmatter.thumbnail ? `with-image` : `no-image`}`}\n    style={\n      props.node.frontmatter.thumbnail && {\n        backgroundImage: `url(${\n          props.node.frontmatter.thumbnail.childImageSharp.fluid.src\n        })`,\n      }\n    }\n  >\n      {\n        props.node.frontmatter.thumbnail\n          ?(<ContentWithImage props={props}/>)\n          :(<ContentNoImage props={props}/>)\n      }\n  </article>\n)\n\nclass ContentNoImage extends Component {\n  render() {\n    const{props}=this.props;\n    return (\n      <div className=\"post-card-content\">\n        <div>\n        <Tags tags={props.node.frontmatter.tags}/>\n        </div>\n        <div>\n        <Link to={props.node.fields.slug} className=\"post-card-link\">\n          <h2 className=\"post-card-title\">\n            {props.node.frontmatter.title || props.node.fields.slug}\n          </h2>\n        </Link>\n        </div>\n        <div className=\"post-card-date\">\n        {props.node.frontmatter.date}\n        </div>\n        <div className=\"post-card-body\">\n        {props.node.frontmatter.description || props.node.excerpt}\n        </div>\n        <div>\n        <Link to={props.node.fields.slug} className=\"post-card-link post-card-readmore\">\n          {\n            props.node.frontmatter.description || props.node.excerpt\n              ?(\"Read more\")\n              :(null)\n          }\n        </Link>\n        </div>\n      </div>\n    );\n  }\n}\n\nclass ContentWithImage extends Component {\n  render() {\n    const{props}=this.props;\n    return (\n      <Link to={props.node.fields.slug} className=\"post-card-link\">\n        <div className=\"post-card-content\">\n          <h2 className=\"post-card-title\">\n            {props.node.frontmatter.title || props.node.fields.slug}\n          </h2>\n        </div>\n      </Link>\n    );\n  }\n}","import React from \"react\"\nimport { graphql } from \"gatsby\"\n\nimport Layout from \"../components/layout\"\nimport SEO from \"../components/seo\"\nimport PostCard from \"../components/postCard\"\nimport PostLink from \"../components/post-link\"\n\nclass TagPageTemplate extends React.Component {\n  render() {\n    const props = this.props\n    const tag = this.props.pageContext.tag\n    const Posts = this.props.data.allMarkdownRemark.edges\n    .filter(edge => !!edge.node.frontmatter.date) // You can filter your posts based on some criteria\n    .map(edge => <PostLink key={edge.node.id} post={edge.node} />)\n    const siteTitle = this.props.data.site.siteMetadata.title\n\n    return (\n      <Layout location={this.props.location} title={siteTitle}>\n        <SEO\n          // title={`#${tag}`}\n          title={`#${tag.charAt(0).toUpperCase() + tag.slice(1)}`}\n          keywords={[`${tag}`, `blog`, `gatsby`, `javascript`, `react`]}\n        />\n         <article className=\"post-content-blog page-template no-image\">\n        <header className=\"tag-page-head\">\n          <h1 className=\"page-head-title\">#{tag}({props.data.allMarkdownRemark.totalCount})</h1>\n        </header>\n        <div className=\"grids-blog\">\n        {Posts}\n      </div>\n      </article>\n    </Layout>\n    )\n  }\n}\n\nexport default TagPageTemplate\n\nexport const pageQuery = graphql`\n  query PostByTag($tag: String!) {\n    site {\n      siteMetadata {\n        title\n        author\n      }\n    }\n    allMarkdownRemark(filter: { frontmatter: { tags: { in: [$tag] } } }, sort: { fields: [frontmatter___date], order: DESC }) {\n      totalCount\n      edges {\n        node {\n          excerpt\n          fields {\n            slug\n          }\n          frontmatter {\n            date(formatString: \"MMMM DD, YYYY\")\n            title\n            description\n            tags\n            thumbnail {\n              childImageSharp {\n                fluid(maxWidth: 1360) {\n                  ...GatsbyImageSharpFluid\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n`\n","/* **********************************************\n * Post-link is a card like element that contains\n * a thumbnail, title, tags and a link to \n * a markdown post \n * *******************************************/\n\nimport React from \"react\"\nimport { Link } from \"gatsby\"\nimport Img from \"gatsby-image\"\nimport Tags from \"./tag\"\n\nconst PostLink = ({ post }) => (\n  <article className=\"post-link\">\n    <Link to={post.fields.slug}>\n      {!!post.frontmatter.thumbnail && (\n        <Img fluid={post.frontmatter.thumbnail.childImageSharp.fluid} alt={post.frontmatter.title} className=\"post-link-image\"/>\n      )}\n    </Link>\n    <header>\n      <div>\n        <Tags tags={post.frontmatter.tags}/>\n      </div>\n      <h2 className=\"post-link-title\">\n        <Link to={post.fields.slug} className=\"post-link-blog\">\n          {post.frontmatter.title}\n        </Link>\n      </h2>\n      <div className=\"post-link-meta\" >{post.frontmatter.date}</div>\n    </header>\n  </article>\n)\nexport default PostLink\n\n\n","import React, { Component } from \"react\";\nimport _ from \"lodash\";\nimport { Link } from \"gatsby\";\n\nclass Tags extends Component {\n  render() {\n    const { tags } = this.props;\n    return (\n      <div className=\"post-card-tags\">\n        {tags &&\n          tags.map(tag => (\n            <span key={tag}>\n            <Link className=\"post-card-tag-link\"\n            key={tag}\n            // style={{ textDecoration: \"none\" }}\n            to={`/tags/${_.kebabCase(tag)}`}\n            >\n            #{tag}\n            </Link>\n            {\" \"}</span>\n          ))}\n      </div>\n    );\n  }\n}\n\nexport default Tags;","module.exports = function(module) {\n\tif (!module.webpackPolyfill) {\n\t\tmodule.deprecate = function() {};\n\t\tmodule.paths = [];\n\t\t// module.parent = undefined by default\n\t\tif (!module.children) module.children = [];\n\t\tObject.defineProperty(module, \"loaded\", {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn module.l;\n\t\t\t}\n\t\t});\n\t\tObject.defineProperty(module, \"id\", {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn module.i;\n\t\t\t}\n\t\t});\n\t\tmodule.webpackPolyfill = 1;\n\t}\n\treturn module;\n};\n"],"sourceRoot":""}