{"version":3,"sources":["webpack:///./src/pages/docs.js"],"names":["DocsPage","location","data","siteTitle","site","siteMetadata","title","allSite","allMarkdownRemark","sidebarConfig","edges","node","treeData","useState","originalData","ignoreIndex","filter","fields","slug","length","items","tree","reduce","accu","frontmatter","parts","slice","split","prevItems","part","tmp","find","label","push","existingItem","url","forcedNavOrder","reverse","forEach","item","sort","a","b","index","findIndex","unshift","splice","calculateTreeData","className","map","child","key","href","props","query","render"],"mappings":"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","file":"component---src-pages-docs-js-09720479dd099288e1b7.js","sourcesContent":["import React, {useState, Link} from \"react\"\nimport { graphql, StaticQuery, useStaticQuery } from \"gatsby\"\n\nimport LayoutDocs from \"../components/docs_layout\"\nimport SEO from \"../components/seo\"\n\n\nimport \"../style/normalize.css\"\nimport \"../style/all.scss\"\n\nconst calculateTreeData = (edges, sidebarConfig) => {\n  const originalData = sidebarConfig.ignoreIndex\n    ? edges.filter(\n        ({\n          node: {\n            fields: { slug }\n          }\n        }) => slug !== '/'\n      )\n    : edges;\n\n  if (originalData.length === 0) {\n    return { items: [] };\n  }\n\n  const tree = originalData.reduce(\n    (\n      accu,\n      {\n        node: {\n          fields: { slug},\n          frontmatter: {title}\n        }\n      }\n    ) => {\n      const parts = slug.slice(1,-1).split('/');\n      let { items: prevItems } = accu;\n      for (const part of parts.slice(1, -1)) {\n        let tmp = prevItems.find(({ label }) => label === part);\n        if (tmp) {\n          if (!tmp.items) {\n            tmp.items = [];\n          }\n        } else {\n          tmp = { label: part, items: [] };\n          prevItems.push(tmp);\n        }\n        prevItems = tmp.items;\n      }\n      const existingItem = prevItems.find(({ label }) => label === parts[parts.length - 1]);\n      if (existingItem) {\n        existingItem.url = slug;\n        existingItem.title = title;\n      } else {\n        prevItems.push({\n          label: parts[parts.length - 1],\n          url: slug,\n          items: [],\n          title\n        });\n      }\n      return accu;\n    },\n    { items: [] }\n  );\n  const forcedNavOrder = sidebarConfig.forcedNavOrder || [];\n  const tmp = [...forcedNavOrder];\n  tmp.reverse();\n  return tmp.reduce((accu, slug) => {\n    const parts = slug.slice(1,-1).split('/');\n    let { items: prevItems } = accu;\n    for (const part of parts.slice(1, -2)) {\n      let tmp = prevItems.find(({ label }) => label === part);\n      if (tmp) {\n        if (!tmp.items) {\n          tmp.items = [];\n        }\n      } else {\n        tmp = { label: part, items: [] };\n        prevItems.push(tmp);\n      }\n      prevItems = tmp.items;\n    }\n    // sort items alphabetically.\n    prevItems.forEach(item => {\n      item.items = item.items.sort(function(a, b) {\n        if (a.label < b.label) return -1;\n        if (a.label > b.label) return 1;\n        return 0;\n      });\n    });\n    const index = prevItems.findIndex(({ label }) => label === parts[parts.length - 1]);\n    accu.items.unshift(prevItems.splice(index, 1)[0]);\n    return accu;\n  }, tree);\n};\n\n\nconst DocsPage = ({ data }, location) => {\n  const siteTitle = data.site.siteMetadata.title;\n  const { allSite, allMarkdownRemark } = data;\n  const { sidebarConfig } = allSite.edges[0].node.siteMetadata;\n  const [treeData] = useState(() => {\n    return calculateTreeData(allMarkdownRemark.edges, sidebarConfig);\n  });\n\n  return (\n    <LayoutDocs title={siteTitle}>\n      <SEO title=\"Docs\" />\n     \n      <article className=\"post-content page-template no-image\">\n      <h1 className=\"post-title-docs\">\n            Table Of Contents\n          </h1>\n          <hr-title />\n        <div className=\"post-content-body tableOfContents\">\n          <ul>\n          {treeData.items.map(child => (\n            <li key={child.url}>\n              <a href={child.url}>{child.title}</a>\n              <ul>\n              {child.items.map(item => (\n                <li>\n                <a href={item.url}>{item.title}</a>\n                </li>\n              ))}\n              </ul>\n            </li>\n          ))}\n        </ul>\n        </div>\n      </article>\n    </LayoutDocs>\n  )\n}\n\n\nconst indexQuery = graphql`\n  query {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    allSite {\n      edges {\n        node {\n          siteMetadata {\n            sidebarConfig {\n              forcedNavOrder\n              ignoreIndex\n            }\n          }\n        }\n      }\n    }\n    benchAccounting: file(\n      relativePath: { eq: \"pp_ruben_online.png\" }\n    ) {\n      childImageSharp {\n        fluid(maxWidth: 1360) {\n          ...GatsbyImageSharpFluid\n        }\n      }\n    }\n    allMarkdownRemark(filter: {fileAbsolutePath: {regex: \"/(docs)/\"  }}, sort: { fields: [fields___slug], order: ASC }) {\n      edges {\n        node {\n          fields {\n            slug\n          }\n          frontmatter {\n            title\n          }\n        }\n      }\n    }\n  }\n`\n\nexport default props => (\n  <StaticQuery\n    query={indexQuery}\n    render={data => (\n      <DocsPage location={props.location} data={data} {...props} />\n    )}\n  />\n)\n"],"sourceRoot":""}