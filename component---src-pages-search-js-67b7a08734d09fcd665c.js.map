{"version":3,"sources":["webpack:///./src/components/linksToPosts/post-link.js","webpack:///./src/pages/search.js","webpack:///./src/components/tag.js","webpack:///(webpack)/buildin/module.js"],"names":["PostLink","post","className","to","fields","slug","frontmatter","thumbnail","fluid","childImageSharp","alt","title","tags","date","BlogIndex","props","data","allPosts","allMarkdownRemark","edges","siteTitle","site","siteMetadata","useState","filteredData","query","state","setState","posts","Posts","filter","edge","node","map","key","id","keywords","style","textAlign","type","aria-label","placeholder","onChange","event","console","log","target","value","description","toLowerCase","includes","join","rawMarkdownBody","excerpt","dangerouslySetInnerHTML","__html","pageQuery","Tags","render","this","tag","_","kebabCase","Component","module","exports","webpackPolyfill","deprecate","paths","children","Object","defineProperty","enumerable","get","l","i"],"mappings":"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","file":"component---src-pages-search-js-67b7a08734d09fcd665c.js","sourcesContent":["/* **********************************************\n * Post-link is a card like element that contains\n * a thumbnail, title, tags and a link to \n * a markdown post \n * *******************************************/\n\nimport React from \"react\"\nimport { Link } from \"gatsby\"\nimport Img from \"gatsby-image\"\nimport Tags from \"../tag\"\n\nconst PostLink = ({ post }) => (\n  <article className=\"post-link\">\n    <Link to={post.fields.slug}>\n      {!!post.frontmatter.thumbnail && (\n        <Img fluid={post.frontmatter.thumbnail.childImageSharp.fluid} alt={post.frontmatter.title} className=\"post-link-image\"/>\n      )}\n    </Link>\n    <header>\n      <div>\n        <Tags tags={post.frontmatter.tags}/>\n      </div>\n      <h2 className=\"post-link-title\">\n        <Link to={post.fields.slug} className=\"post-link-blog\">\n          {post.frontmatter.title}\n        </Link>\n      </h2>\n      <div className=\"post-link-meta\" >{post.frontmatter.date}</div>\n    </header>\n  </article>\n)\nexport default PostLink\n\n\n","import React, { useState } from 'react';\nimport { Link, graphql } from \"gatsby\";\n\nimport LayoutHome from \"../components/home_layout\"\nimport SEO from \"../components/seo\"\nimport PostLink from \"../components/linksToPosts/post-link\"\n\nconst BlogIndex = props => {\n  \n  const { data } = props\n  const allPosts = data.allMarkdownRemark.edges\n  const siteTitle = data.site.siteMetadata.title\n\n  const emptyQuery = \"\"\n\n  const [state, setState] = useState({\n    filteredData: [],\n    query: emptyQuery,\n  })\n\n  const handleInputChange = event => {\n    console.log(event.target.value)\n    const query = event.target.value\n    const { data } = props\n\n    const posts = data.allMarkdownRemark.edges || []\n\n    const filteredData = posts.filter(post => {\n      const { description, title, tags } = post.node.frontmatter\n      return (\n        (description && description.toLowerCase().includes(query.toLowerCase())) ||\n        title.toLowerCase().includes(query.toLowerCase()) ||\n        (tags &&\n          tags\n            .join(\"\")\n            .toLowerCase()\n            .includes(query.toLowerCase())) ||\n            post.node.rawMarkdownBody.toLowerCase().includes(query.toLowerCase())\n      )\n    })\n\n    setState({\n      query,\n      filteredData,\n    })\n  }\n\n  const { filteredData, query } = state\n  const hasSearchResults = filteredData && query !== emptyQuery\n  const posts = hasSearchResults ? filteredData : allPosts\n\n  const Posts = posts\n    .filter(edge => !!edge.node.frontmatter.date)\n    .map(edge => <PostLink key={edge.node.id} post={edge.node} />)\n\n  return (\n    <LayoutHome title={siteTitle}>\n        <SEO\n          // title={`#${tag}`}\n          title={`Search`}\n          keywords={[`search`]}\n        />\n        <article className=\"post-content-blog page-template no-image\">\n      <h1 style={{ textAlign: `center` }}>Search</h1>\n      \n      <div className=\"searchBox\">\n        <input\n          className=\"searchInput\"\n          type=\"text\"\n          aria-label=\"Search\"\n          placeholder=\"Type to search through posts...\"\n          onChange={handleInputChange}\n        />\n      </div>\n      Warning: this search feature is rather basic! If you type 'bicycle koala' it will search for that string, not both words seperately.\n\n      <div className=\"grids-blog\">\n        {Posts}\n      </div>\n\n      {posts.map(({ node }) => {\n        const { excerpt } = node\n\n        const { slug } = node.fields\n        const { title, date, description } = node.frontmatter\n        return (\n          <article key={slug}>\n              <h2 >\n                <Link to={slug}>{title}</Link>\n              </h2>\n              {date}\n              <p\n                dangerouslySetInnerHTML={{\n                  __html: description || excerpt,\n                }}\n              />\n            <hr />\n          </article>\n        )\n      })}\n      </article>\n    </LayoutHome>\n  )\n}\n\nexport default BlogIndex\n\nexport const pageQuery = graphql`\n  query {\n    site {\n      siteMetadata {\n        title\n        author\n      }\n    }\n    allMarkdownRemark(sort: { order: DESC, fields: frontmatter___date }) {\n      edges {\n        node {\n          excerpt(pruneLength: 300)\n          id\n          frontmatter {\n            title\n            description\n            date(formatString: \"MMMM DD, YYYY\")\n            tags\n            thumbnail {\n              childImageSharp {\n                fluid(maxWidth: 1360) {\n                  ...GatsbyImageSharpFluid\n                }\n              }\n            }\n          }\n          rawMarkdownBody\n          fields {\n            slug\n          }\n        }\n      }\n    }\n  }\n`","import React, { Component } from \"react\";\nimport _ from \"lodash\";\nimport { Link } from \"gatsby\";\n\nclass Tags extends Component {\n  render() {\n    const { tags } = this.props;\n    return (\n      <div className=\"post-card-tags\">\n        {tags &&\n          tags.map(tag => (\n            <span key={tag}>\n            <Link className=\"post-card-tag-link\"\n            key={tag}\n            // style={{ textDecoration: \"none\" }}\n            to={`/tags/${_.kebabCase(tag)}`}\n            >\n            #{tag}\n            </Link>\n            {\" \"}</span>\n          ))}\n      </div>\n    );\n  }\n}\n\nexport default Tags;","module.exports = function(module) {\n\tif (!module.webpackPolyfill) {\n\t\tmodule.deprecate = function() {};\n\t\tmodule.paths = [];\n\t\t// module.parent = undefined by default\n\t\tif (!module.children) module.children = [];\n\t\tObject.defineProperty(module, \"loaded\", {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn module.l;\n\t\t\t}\n\t\t});\n\t\tObject.defineProperty(module, \"id\", {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn module.i;\n\t\t\t}\n\t\t});\n\t\tmodule.webpackPolyfill = 1;\n\t}\n\treturn module;\n};\n"],"sourceRoot":""}