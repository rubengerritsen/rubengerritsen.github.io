{"componentChunkName":"component---src-templates-doc-post-js","path":"/docs/02_cmake/01_windows/","result":{"data":{"site":{"siteMetadata":{"title":"rubengerritsen.nl","author":"Ruben Gerritsen"}},"markdownRemark":{"id":"98d97909-83e9-5559-adf6-d26fc7439ee6","excerpt":"On this page we discuss how to setup and use a CMake and C++ project to do\nscientific computing. The start is a bit tedious, but once you have worked\nthrough…","html":"<p>On this page we discuss how to setup and use a CMake and C++ project to do\nscientific computing. The start is a bit tedious, but once you have worked\nthrough the initial setup and installation, it can be reused for any other\nproject you want to start, so don’t despair it is only a one time thing.</p>\n<h1 id=\"getting-the-dependencies\" style=\"position:relative;\"><a href=\"#getting-the-dependencies\" aria-label=\"getting the dependencies permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Getting the dependencies</h1>\n<p>Before we can do anything we need to get and install all the dependencies. In\norder we will install</p>\n<ol>\n<li>Visual Studio (optional if you already have a favorite IDE)</li>\n<li>CMake</li>\n<li>Boost</li>\n<li>Eigen3</li>\n</ol>\n<h2 id=\"visual-studio\" style=\"position:relative;\"><a href=\"#visual-studio\" aria-label=\"visual studio permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Visual Studio</h2>\n<p>To write code it is easiest to use an IDE (Integrated Development Environment).\nA great IDE for Windows is Visual Studio. Navigate to the <a href=\"https://visualstudio.microsoft.com/\">Visual\nStudio</a> website. Click <code class=\"language-text\">Download Visual Studio</code> and select the community version (it is free!). You can follow the\ninstaller instructions until you get to the <code class=\"language-text\">Workloads</code> window (see the image below), here you need to\nselect what you want to use Visual Studio for, in our case it will be <code class=\"language-text\">Desktop development with C++</code>, select it and press <code class=\"language-text\">install</code>, you can now follow the\ninstructions from the installer until the end. It might be necessary to have a\nmicrosoft account to start using Visual Studio, but you can make one for free.</p>\n<h2 id=\"cmake\" style=\"position:relative;\"><a href=\"#cmake\" aria-label=\"cmake permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>CMake</h2>\n<p>CMake is a build tool that takes care of the linking and compilation of a C++ program, so we don’t have to worry about it. Navigate to its <a href=\"https://cmake.org/download/\">download page</a> and select one of the installers, most likely you want the Windows x64 installer, that ends with the <code class=\"language-text\">.msi</code> extension. You can follow the installer instructions, <strong>but make sure to select the option to add CMake to the PATH for all users</strong>.</p>\n<h2 id=\"boost\" style=\"position:relative;\"><a href=\"#boost\" aria-label=\"boost permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Boost</h2>\n<p>Boost is a very powerful library with many advanced features, it is a bit big\nhowever, so extracting it might take a while. Go to the <a href=\"https://www.boost.org/\">boost\nwebsite</a> and under <em>Current Release</em> click download.\nAfter the download extract the zip file. Probably all the features you need are\nwithin the headers of Boost, this means we don’t need to install it, we only\nneed to copy paste the files to the correct folder. Create a folder in\n<code class=\"language-text\">C:/Program files</code> called <code class=\"language-text\">boost</code>, copy paste the <code class=\"language-text\">boost_1_75_0</code> (or whatever\nversion) folder into the <code class=\"language-text\">C:/Program files/boost</code> folder. Windows might complain\nabout administrator priviliges, just press okay in this case. This is the whole\ninstallation process of Boost, we don’t need anything more. If you, however,\nneed the more advanced Boost features in the future that require building parts\nof boost, you can find more information about it here <a href=\"https://www.boost.org/doc/libs/1_75_0/more/getting_started/windows.html\">Getting Started on\nWindows</a></p>\n<h2 id=\"eigen3\" style=\"position:relative;\"><a href=\"#eigen3\" aria-label=\"eigen3 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Eigen3</h2>\n<p>Eigen3 is a very advanced linear algebra library, it also provides data\nstructures that work in a similar way as NumPy (at least on the surface), it is\nvery useful for mathematical computations. You can download it for <a href=\"https://eigen.tuxfamily.org/index.php?title=Main_Page\">their\nwebsite</a> under <em>Get it</em>\nclick on the zip file of the latest stable release. After the download, extract\nthe folder. Now comes the tricky part, we need to install Eigen3 from the\ncommand line with administrator privileges.</p>\n<p>To open a powershell press the <code class=\"language-text\">Windows Key</code> + <code class=\"language-text\">X</code>, a menu will appear, select\n<code class=\"language-text\">Windows PowerShell (Admin)</code>, now a powershell window will open. Next we need to\nnavigate to the place where you extracted Eigen3, in my case it is in Downloads,\nthe exact location (for me) is\n<code class=\"language-text\">C:/Users/rhjge/Downloads/eigen-3.3.9/eigen-3.3.9</code>. To get there we use the <code class=\"language-text\">cd</code>\ncommand like this (but obviously with your file location, not mine)</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">cd</span> <span class=\"token string\">\"C:/Users/rhjge/Downloads/eigen-3.3.9/eigen-3.3.9\"</span></code></pre></div>\n<p>Now you should be in the correct folder (you can check this by looking at the\npath before the <code class=\"language-text\">&gt;</code>, it is something like <code class=\"language-text\">PS C:\\Users\\rhjge\\Download\\eigen-3.3.9\\eigen-3.3.9&gt;</code>). Next we need to create a\nbuild folder, this is done by typing</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">mkdir</span> build</code></pre></div>\n<p>This command creates a new folder <code class=\"language-text\">build</code> in the current folder. Next we\nnavigate into the build folder (<code class=\"language-text\">cd build</code>) and start to build Eigen3. This is\ndone in two steps, the first is a configuration step, run</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">cmake --build <span class=\"token punctuation\">..</span></code></pre></div>\n<p>This will start to configure Eigen, it will probably spit out many errors and\nwarnings, in most cases they shouldn’t be any problem and can be savely ignored.\nMost warnings are about certain packages that are not installed that would make\nEigen even more efficient and fast, you don’t need it to develop code. It might\nbe interesting to look at it though if you run a large computation on a cluster.</p>\n<p>Now that eigen is configured it should be installed, this is done by the following command</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">cmake --build <span class=\"token builtin class-name\">.</span> --target <span class=\"token function\">install</span></code></pre></div>\n<p>If you look at the output of this command you can see exactly where each file is installed.</p>\n<h1 id=\"creating-the-c-project\" style=\"position:relative;\"><a href=\"#creating-the-c-project\" aria-label=\"creating the c project permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Creating the C++ Project</h1>\n<p>In this section I will assume you use Visual Studio, if you use something else\nmost things still apply but there are some differences.</p>\n<p>Start Visual Studio and select <code class=\"language-text\">Create a new project</code>, next select <code class=\"language-text\">CMake Project</code>, press next and give your project a name, I will call it <code class=\"language-text\">example</code> and\nleave the other defaults untouched, next press <code class=\"language-text\">Create</code>. The creation might take\na few seconds. Now you should have an example program, if you look at the right\npart of your screen you will see the solution explorer. There are three items, a\nfolder <code class=\"language-text\">out</code>, a folder <code class=\"language-text\">example</code> (or whatever your project name is) and a\nCMakeLists.txt file. In your project folder, there are three files already,\n<code class=\"language-text\">CMakeLists.txt</code>, <code class=\"language-text\">&lt;yourProjectName&gt;.cpp</code> and <code class=\"language-text\">&lt;yourProjectName&gt;.h</code>. If you open\n<code class=\"language-text\">&lt;yourProjectName&gt;.cpp</code> by clicking on it, you can press the green triangle at\nthe top and the example program will be build and run.</p>\n<p>We won’t use the example program generated by Visual Studio, hence you can delete the whole folder with your projects name, leave the outer <code class=\"language-text\">CMakeLists.txt</code> file and the <code class=\"language-text\">out</code> folder untouched.</p>\n<h2 id=\"setting-up-the-project\" style=\"position:relative;\"><a href=\"#setting-up-the-project\" aria-label=\"setting up the project permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Setting up the project</h2>\n<p>Most C++ projects have a similar basic structure, there is a source folder, containing the <code class=\"language-text\">.cpp</code> source files and an include folder, containing the <code class=\"language-text\">.h</code> files. Let’s create this basic structure. Create a <code class=\"language-text\">src</code> and a <code class=\"language-text\">include</code> folder in the main folder of the project (right click on the main folder, select <code class=\"language-text\">Add</code>, <code class=\"language-text\">New Folder</code>). Also create a <code class=\"language-text\">main.cpp</code> file within the <code class=\"language-text\">src</code> folder.</p>\n<p>The final layout of the solution explorer should look something like</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">example (C:\\Users\\rhjge\\source\\repos\\example)\n├── include\n├── out\n|   └── ... (more stuff)\n├── src\n│   └── main.cpp\n└── CMakeLists.txt</code></pre></div>\n<h2 id=\"hello-world-with-c-and-cmake\" style=\"position:relative;\"><a href=\"#hello-world-with-c-and-cmake\" aria-label=\"hello world with c and cmake permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Hello World (with C++ and CMake)</h2>\n<p>Now that we have the layout setup it is time to build a project. We will build the classic <em>Hello World</em> program as an example. In the <code class=\"language-text\">main.cpp</code> file copy paste the following code.</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    std<span class=\"token operator\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Hello World!\"</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token operator\">::</span>endl<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>We won’t care much about what the code means, for that follow a basic tutorial on the internet,\nwhat we will focus on here is how to build and compile it with CMake.</p>\n<p>Open the <code class=\"language-text\">CMakeLists.txt</code> file and copy paste the following code into it. I have\nadded many comments to explain what every line does, read them carefully. This\nfile is used to tell CMake how to build and compile the program we are creating.</p>\n<div class=\"gatsby-highlight\" data-language=\"cmake\"><pre class=\"language-cmake\"><code class=\"language-cmake\"><span class=\"token comment\"># does what it says, it sets the minimum required version to 3.8</span>\n<span class=\"token keyword\">cmake_minimum_required</span> <span class=\"token punctuation\">(</span><span class=\"token property\">VERSION</span> <span class=\"token number\">3.8</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># set the projects name</span>\n<span class=\"token keyword\">project</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"example\"</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># There are many different C++ versions labeled by their release year</span>\n<span class=\"token comment\"># here we will use the one from 2014 for compatibility with the VOTCA-XTP project.</span>\n<span class=\"token comment\"># You are free to use a more recent C++ version if you need the features</span>\n<span class=\"token keyword\">set</span><span class=\"token punctuation\">(</span><span class=\"token variable\">CMAKE_CXX_STANDARD</span> <span class=\"token number\">14</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># If 14 is not available we want an error, this is done by setting it as required</span>\n<span class=\"token keyword\">set</span><span class=\"token punctuation\">(</span><span class=\"token variable\">CMAKE_CXX_STANDARD_REQUIRED</span> True<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># Here we specify the folders where the compiler should look for include files.</span>\n<span class=\"token comment\"># We have created an include folder specifically for this purpose, so we add it here</span>\n<span class=\"token keyword\">include_directories</span><span class=\"token punctuation\">(</span>include<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># To make compilation easy we want CMake to look for all possible .cpp files that should be compiled</span>\n<span class=\"token comment\"># We do this with a \"GLOB\", a way of writing generic file names. For example the GLOB \"src/*.cpp\" translates to</span>\n<span class=\"token comment\"># every file in the src folder that ends with .cpp, the asterix (*) is called a wild card, it matches</span>\n<span class=\"token comment\"># any possible string.</span>\n<span class=\"token keyword\">file</span><span class=\"token punctuation\">(</span>GLOB <span class=\"token property\">SOURCES</span> <span class=\"token string\">\"src/*.cpp\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># after this command all source files are collected in the variable SOURCES</span>\n\n<span class=\"token comment\"># Now we create an executable (the actual program) named example, we want it to use all the source files.</span>\n<span class=\"token comment\"># We need ${variable} to access the contents of a variable, hence ${SOURCES} gives all the sources</span>\n<span class=\"token comment\"># collected with the GLOB expression above.</span>\n<span class=\"token keyword\">add_executable</span> <span class=\"token punctuation\">(</span>example <span class=\"token punctuation\">${</span><span class=\"token property\">SOURCES</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>If you now navigate to the main.cpp file and press the play button (green triangle) your program will build and run.</p>\n<h1 id=\"using-eigen-boost-and-openmp\" style=\"position:relative;\"><a href=\"#using-eigen-boost-and-openmp\" aria-label=\"using eigen boost and openmp permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Using Eigen, Boost and OpenMP</h1>\n<p>Now that we know how to build a very basic program with CMake and C++ let’s look at how to use libraries. We will compile a program that does some simpe linear algebra, format strings using boost and do a parallel for loop. You can copy past it into <code class=\"language-text\">main.cpp</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;Eigen/Dense></span> <span class=\"token comment\">// Needed to acces Eigen3's vectors and matrices</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;boost/format.hpp></span> <span class=\"token comment\">// Needed to acces Boosts formatter</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;omp.h></span> <span class=\"token comment\">// Needed for the parallel tools from OpenMP</span></span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">/*****************/</span>\n  <span class=\"token comment\">/* USING EIGEN 3 */</span>\n  <span class=\"token comment\">/*****************/</span>\n  <span class=\"token comment\">// create a 3-vector (1,2,3)</span>\n  Eigen<span class=\"token operator\">::</span>Vector3d vec<span class=\"token punctuation\">;</span>\n  vec <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n  std<span class=\"token operator\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Print the vector\"</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token operator\">::</span>endl<span class=\"token punctuation\">;</span>\n  std<span class=\"token operator\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> mat <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token operator\">::</span>endl<span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// create a 3x3 matrix</span>\n  Eigen<span class=\"token operator\">::</span>Matrix3d mat<span class=\"token punctuation\">;</span>\n  mat <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span><span class=\"token number\">9</span><span class=\"token punctuation\">;</span>\n  std<span class=\"token operator\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Print the matrix\"</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token operator\">::</span>endl<span class=\"token punctuation\">;</span>\n  std<span class=\"token operator\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> mat <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token operator\">::</span>endl<span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// Compute the product</span>\n  std<span class=\"token operator\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"This is their product\"</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token operator\">::</span>endl<span class=\"token punctuation\">;</span>\n  std<span class=\"token operator\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> mat <span class=\"token operator\">*</span> vec <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token operator\">::</span>endl<span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">/*****************/</span>\n  <span class=\"token comment\">/* USING BOOST   */</span>\n  <span class=\"token comment\">/*****************/</span>\n  std<span class=\"token operator\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> boost<span class=\"token operator\">::</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"This will be a formatted number: %1.4f\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span>\n                 <span class=\"token number\">1.67329587</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">/**************************/</span>\n  <span class=\"token comment\">/* An OpenMP EXAMPLE      */</span>\n  <span class=\"token comment\">/**************************/</span>\n  <span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> size <span class=\"token operator\">=</span> <span class=\"token number\">25600</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">double</span> sinTable<span class=\"token punctuation\">[</span>size<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// We use half the available threads, just to see what it does in the task</span>\n  <span class=\"token comment\">// manager or htop. For a heavy application you would want to use as many as possible</span>\n  <span class=\"token keyword\">int</span> maxThreads <span class=\"token operator\">=</span> <span class=\"token function\">omp_get_max_threads</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">int</span> nrOfThreadsToUse <span class=\"token operator\">=</span> maxThreads <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n  <span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">pragma</span> <span class=\"token expression\">omp parallel <span class=\"token keyword\">for</span> <span class=\"token function\">num_threads</span><span class=\"token punctuation\">(</span>nrOfThreadsToUse<span class=\"token punctuation\">)</span></span></span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> n <span class=\"token operator\">&lt;</span> size<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// What we do here is useless, but it takes some time</span>\n    <span class=\"token comment\">// so you can inspect windows task manager (windows), debug panel or htop(Linux)</span>\n    <span class=\"token comment\">// to see that the for loop is run over multiple cores at the same time.</span>\n    sinTable<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> std<span class=\"token operator\">::</span><span class=\"token function\">sin</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span> <span class=\"token operator\">*</span> <span class=\"token number\">3.14</span> <span class=\"token operator\">*</span> n <span class=\"token operator\">/</span> size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n2 <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> n2 <span class=\"token operator\">&lt;</span> size<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>n2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      sinTable<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span> <span class=\"token operator\">+=</span> std<span class=\"token operator\">::</span><span class=\"token function\">sin</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span> <span class=\"token operator\">*</span> <span class=\"token number\">3.14</span> <span class=\"token operator\">*</span> n <span class=\"token operator\">/</span> size<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> n2<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>To use Boost, Eigen and OpenMP, we need to let CMake know that we want to use\nthese libraries, this is done with the following <code class=\"language-text\">CMakeLists.txt</code> file. I have\nadded comments to all new commands.</p>\n<div class=\"gatsby-highlight\" data-language=\"cmake\"><pre class=\"language-cmake\"><code class=\"language-cmake\"><span class=\"token keyword\">cmake_minimum_required</span> <span class=\"token punctuation\">(</span><span class=\"token property\">VERSION</span> <span class=\"token number\">3.8</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">project</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"test\"</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">set</span><span class=\"token punctuation\">(</span><span class=\"token variable\">CMAKE_CXX_STANDARD</span> <span class=\"token number\">14</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">set</span><span class=\"token punctuation\">(</span><span class=\"token variable\">CMAKE_CXX_STANDARD_REQUIRED</span> True<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># Windows is not so nice with the structure of include files and libraries</span>\n<span class=\"token comment\"># Hence we need to help it a bit to find boost, on UNIX/LINUX systems we don't need this</span>\n<span class=\"token comment\"># NB Check if the path here actually points to a boost installation folder, otherwise it won't work</span>\n<span class=\"token comment\"># I installed it in my `Program files` as suggested above</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">WIN32</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># WIN32 is true on a windows system</span>\n    <span class=\"token keyword\">set</span><span class=\"token punctuation\">(</span>Boost_INCLUDE_DIR <span class=\"token string\">\"C:/Program files/boost/boost_1_75_0\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">endif</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">WIN32</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># The nice thing about CMake is that it can find dependecies for us and handle</span>\n<span class=\"token comment\"># the linking and include files, to find a package we do the following</span>\n<span class=\"token keyword\">find_package</span><span class=\"token punctuation\">(</span>Eigen3 <span class=\"token number\">3.3</span> REQUIRED<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">find_package</span><span class=\"token punctuation\">(</span>Boost REQUIRED<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">find_package</span><span class=\"token punctuation\">(</span>OpenMP<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># Besides our own include directory also Boost has one, since we used CMake to</span>\n<span class=\"token comment\"># find the package for us, the include folder is stored in ${Boost_INCLUDE_DIRS}</span>\n<span class=\"token comment\"># so our include directories are our own include directory and the Boost ones.</span>\n<span class=\"token keyword\">include_directories</span><span class=\"token punctuation\">(</span>include <span class=\"token punctuation\">${</span>Boost_INCLUDE_DIRS<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">file</span><span class=\"token punctuation\">(</span>GLOB <span class=\"token property\">SOURCES</span> <span class=\"token string\">\"src/*.cpp\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">add_executable</span> <span class=\"token punctuation\">(</span>test <span class=\"token punctuation\">${</span><span class=\"token property\">SOURCES</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># Since we use external libraries, we need to link our executable to them.</span>\n<span class=\"token comment\"># Here we link agains Eigen, Boost and OpenMP.</span>\n<span class=\"token comment\"># The PUBLIC keyword is used to specify the type of interface, in most cases PUBLIC</span>\n<span class=\"token comment\"># will be fine.</span>\n<span class=\"token keyword\">target_link_libraries</span><span class=\"token punctuation\">(</span>test <span class=\"token namespace\">PUBLIC</span> <span class=\"token inserted class-name\">Eigen3::Eigen</span> <span class=\"token punctuation\">${</span>Boost_LIBRARIES<span class=\"token punctuation\">}</span> <span class=\"token inserted class-name\">OpenMP::OpenMP_CXX</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>If you navigate to <code class=\"language-text\">main.cpp</code> now and press the play button, your code will compile and run. See what it does and you can start to play around with it.</p>\n<h1 id=\"why-did-we-do-all-this-stuff\" style=\"position:relative;\"><a href=\"#why-did-we-do-all-this-stuff\" aria-label=\"why did we do all this stuff permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Why did we do all this stuff?</h1>\n<p>With the CMake file above, CMake automatically searches for new header files in the include directories, including our own <code class=\"language-text\">include</code> directory and for new source files (<code class=\"language-text\">.cpp</code>) in the <code class=\"language-text\">src</code> directory. Hence using CMake linking and compiling will from now on always be just a single push of the button. CMake will search for then new files, compile and link them against the necessary libraries. We do no longer need to do any of this stuff manually.</p>","tableOfContents":"<ul>\n<li>\n<p><a href=\"/docs/02_cmake/01_windows/#getting-the-dependencies\">Getting the dependencies</a></p>\n<ul>\n<li><a href=\"/docs/02_cmake/01_windows/#visual-studio\">Visual Studio</a></li>\n<li><a href=\"/docs/02_cmake/01_windows/#cmake\">CMake</a></li>\n<li><a href=\"/docs/02_cmake/01_windows/#boost\">Boost</a></li>\n<li><a href=\"/docs/02_cmake/01_windows/#eigen3\">Eigen3</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"/docs/02_cmake/01_windows/#creating-the-c-project\">Creating the C++ Project</a></p>\n<ul>\n<li><a href=\"/docs/02_cmake/01_windows/#setting-up-the-project\">Setting up the project</a></li>\n<li><a href=\"/docs/02_cmake/01_windows/#hello-world-with-c-and-cmake\">Hello World (with C++ and CMake)</a></li>\n</ul>\n</li>\n<li><a href=\"/docs/02_cmake/01_windows/#using-eigen-boost-and-openmp\">Using Eigen, Boost and OpenMP</a></li>\n<li><a href=\"/docs/02_cmake/01_windows/#why-did-we-do-all-this-stuff\">Why did we do all this stuff?</a></li>\n</ul>","fields":{"slug":"/docs/02_cmake/01_windows/"},"frontmatter":{"title":"CMake and C++ on Windows","description":"How to setup a basic C++ project with CMake for scientific computing.","thumbnail":null}},"allMarkdownRemark":{"totalCount":17,"edges":[{"node":{"excerpt":"Introduction Here we will discuss some basics of the software package named Visual Molecular\nDynamics (VMD). It can be used to make fancy…","fields":{"slug":"/docs/03_VMD_basics/"},"frontmatter":{"title":"VMD A very basic tutorial","description":"VMD install and brief tutorial","tags":["vmd","molecules"]}}},{"node":{"excerpt":"C++ is a great language for scientific computing. For most people, however, getting started with C++ is a big hurdle. Most people think that…","fields":{"slug":"/docs/02_cmake/"},"frontmatter":{"title":"CMake and C++ for Scientific Computing","description":"How to setup a basic C++ project with CMake for scientific computing.","tags":["c++","cmake"]}}},{"node":{"excerpt":"This is a collection of python tutorials originally written for the Molecular Dynamics course 2MMN40 at\nthe TU/e.","fields":{"slug":"/docs/01_python/"},"frontmatter":{"title":"Python for Molecular Dynamics","description":"python","tags":["python"]}}},{"node":{"excerpt":"In this chapter we introduce the main ideas of the many-body theory of\nmolecular systems. This theory is used to compute geometries and the…","fields":{"slug":"/docs/latexTest/"},"frontmatter":{"title":"Testing Latex Support","description":"Description","tags":null}}},{"node":{"excerpt":"A collection of notes.","fields":{"slug":"/docs/xx_miscellaneous/"},"frontmatter":{"title":"Miscellaneous","description":"A collection of notes about all kind of things.","tags":null}}},{"node":{"excerpt":"Introduction In this course we will build a Molecular Dynamics (MD) engine in python 3. On this page we will show you how to setup python…","fields":{"slug":"/docs/01_python/00_SettingUpPython/"},"frontmatter":{"title":"Setting Up Python","description":"How to install python","tags":["install","python","anaconda"]}}},{"node":{"excerpt":"Introduction Now that you have a python setup, it is time to see what it can do. The following instructions will assume you have Anaconda…","fields":{"slug":"/docs/01_python/01_GettingToKnowYourPythonSetup/"},"frontmatter":{"title":"Getting To Know Your Python Setup","description":"A quick overview of the spyder IDE and a first code example.","tags":["python","spyder","beginner"]}}},{"node":{"excerpt":"Introduction This is the first of our python tutorials on Canvas for 2MMN40. These tutorials are not meant as a complete reference. What…","fields":{"slug":"/docs/01_python/02_Python_basics/"},"frontmatter":{"title":"Basic Python, Lists, Strings, Math, Controlstatements and Functions","description":"A minimal overview of the basic python features.","tags":["python","basics","programming"]}}},{"node":{"excerpt":"Introduction NumPy is an extension of python specifically designed for doing numeric computations. The two main features of the package are…","fields":{"slug":"/docs/01_python/03_Numpy_basics/"},"frontmatter":{"title":"Numpy Basics","description":"A brief overview of the most important numpy features for Scientific Computing.","tags":["python","numpy","spyder","basics"]}}},{"node":{"excerpt":"To start we need a file, copy paste the following into a file called  that you save in the same folder as your python script. Reading To…","fields":{"slug":"/docs/01_python/04_Python_FileIO_StringFormatting/"},"frontmatter":{"title":"File IO and String Formatting","description":"Basic FileIO with python","tags":["python","fileIO"]}}},{"node":{"excerpt":"Introduction As you start to write more and more code, it becomes important to organize that code. There are many ways to do this and many…","fields":{"slug":"/docs/01_python/06_Python_OrganizingALargeProject/"},"frontmatter":{"title":"Organizing Code","description":"Functional and Procedural programming, python modules.","tags":["python","largeproject"]}}},{"node":{"excerpt":"There might be a moment during this course in which you would like to specify options for your program. For example you might want to pass…","fields":{"slug":"/docs/01_python/05_Python_OptionsAndInput/"},"frontmatter":{"title":"Options Parsing","description":"Options parsing with python and XML files","tags":["xml","python","optionparsing"]}}},{"node":{"excerpt":"Here is a list of great sources of information for python, numpy and matplotlib. The Official Python Tutorial If you want a good basis in…","fields":{"slug":"/docs/01_python/07_Python_online_resources/"},"frontmatter":{"title":"Python Resources","description":"Sources to learn python","tags":["python","resources"]}}},{"node":{"excerpt":"Using The Tests To enable tests run  and then  to actually build them or compile VOTCA with the option enabled. To run all the unit tests…","fields":{"slug":"/docs/xx_miscellaneous/01_unitTest/"},"frontmatter":{"title":"Unit Testing in VOTCA","description":"Unit Testing in VOTCA","tags":null}}},{"node":{"excerpt":"This markdown file is an extended version of the standard Markdown Cheatsheet often used as a reference, test and showcase. Hence presented…","fields":{"slug":"/docs/xx_miscellaneous/MarkdownRef/"},"frontmatter":{"title":"Markdown Reference","description":"A markdown reference cheat.","tags":["markdown","math","floats"]}}},{"node":{"excerpt":"On this page we discuss how to setup a basic C++ project with CMake for\nscientific computing. It will use the Boost, Eigen and OpenMP…","fields":{"slug":"/docs/02_cmake/02_linux/"},"frontmatter":{"title":"CMake and C++ on Linux","description":"How to setup a basic C++ project with CMake for scientific computing.","tags":["c++","cmake","linux"]}}},{"node":{"excerpt":"On this page we discuss how to setup and use a CMake and C++ project to do\nscientific computing. The start is a bit tedious, but once you…","fields":{"slug":"/docs/02_cmake/01_windows/"},"frontmatter":{"title":"CMake and C++ on Windows","description":"How to setup a basic C++ project with CMake for scientific computing.","tags":["c++","cmake","windows","boost","eigen3"]}}}]}},"pageContext":{"slug":"/docs/02_cmake/01_windows/","previous":null,"next":{"fields":{"slug":"/docs/02_cmake/02_linux/"},"frontmatter":{"title":"CMake and C++ on Linux","tags":["c++","cmake","linux"]}}}},"staticQueryHashes":["3200707273","764694655"]}