{"componentChunkName":"component---src-templates-doc-post-js","path":"/docs/python/Python_OptionsAndInput/","result":{"data":{"site":{"siteMetadata":{"title":"rubengerritsen.nl","author":"Ruben Gerritsen"}},"markdownRemark":{"id":"66bc4bee-8a92-5998-84ed-4eb327d1129e","excerpt":"Options Parsing There might be a moment during this course in which you would like to specify options for your program. For example you might want to pass the…","html":"<h1 id=\"options-parsing\" style=\"position:relative;\"><a href=\"#options-parsing\" aria-label=\"options parsing permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Options Parsing</h1>\n<p>There might be a moment during this course in which you would like to specify options for your program. For example you might want to pass the temperature or some other parameters. There are many ways to do this, one of the easiest is just typing the parameters in your python code, but this is risky. The main problem is that if you run multiple simulations and change the parameters every time, it becomes hard to keep track of which simulations were run with which parameters. This is particularly annoying if a simulation takes multiple hours. </p>\n<p>There are multiple solutions to this problem but an easy one is specifying options in an option file and save that option file with your simulation results. Here we will present an easy way to parse options via xml files.</p>\n<h2 id=\"xml-files\" style=\"position:relative;\"><a href=\"#xml-files\" aria-label=\"xml files permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>XML files</h2>\n<p>XML files are files where you can store values (elements) with a name (tag) and attributes. Let’s look at an example file</p>\n<div class=\"gatsby-highlight\" data-language=\"xml\"><pre class=\"language-xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>options</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>mode</span> <span class=\"token attr-name\">help</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>can be: growseason, specificmoment, monthly or hourly<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>monthly<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>mode</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>outputPath</span><span class=\"token punctuation\">></span></span>../output<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>outputPath</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>latitude</span><span class=\"token punctuation\">></span></span>51.9269<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>latitude</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>longitude</span><span class=\"token punctuation\">></span></span>6.5697<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>longitude</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>timezone</span><span class=\"token punctuation\">></span></span>2.0<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>timezone</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>options</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>An XML file consists of three things</p>\n<ul>\n<li>Opening and closing tags: they are the parts between the angular brackets, this <code class=\"language-text\">&lt;options&gt;</code> is an opening tag named options and this <code class=\"language-text\">&lt;/options&gt;</code> is a closing tag.</li>\n<li>Attributes: these are key-value pairs, in the example above there is only one, a help message. The key is <code class=\"language-text\">help</code> and the value is <code class=\"language-text\">&quot;can be: growseason, specificmoment, monthly or hourly&quot;</code>. Note that attributes are written inside the opening tag.</li>\n<li>Elements: the part between an opening and closing tag. Examples in the above file are <code class=\"language-text\">monthly</code>, <code class=\"language-text\">../output</code> and <code class=\"language-text\">51.9269</code>.</li>\n</ul>\n<p>The combination of tags and elements allows us to get options by name from the\nxml file. What follows is some example code of how you would read from the XML\nfile above (I saved the xml file as <code class=\"language-text\">example.xml</code>). </p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> xml<span class=\"token punctuation\">.</span>etree<span class=\"token punctuation\">.</span>ElementTree <span class=\"token keyword\">as</span> ET\n\n<span class=\"token comment\"># read the xml file</span>\ntree <span class=\"token operator\">=</span> ET<span class=\"token punctuation\">.</span>parse<span class=\"token punctuation\">(</span><span class=\"token string\">'example.xml'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># get the contents of the outermost tag,</span>\n<span class=\"token comment\"># in this case everything between &lt;options> and &lt;/options></span>\noptions <span class=\"token operator\">=</span> tree<span class=\"token punctuation\">.</span>getroot<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> \n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>options<span class=\"token punctuation\">.</span>find<span class=\"token punctuation\">(</span><span class=\"token string\">\"mode\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">)</span> <span class=\"token comment\"># .text gets the contents of the element</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>options<span class=\"token punctuation\">.</span>find<span class=\"token punctuation\">(</span><span class=\"token string\">\"latitude\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># note that we always read a string, so we have to convert to a </span>\n<span class=\"token comment\"># number if we want to do computations</span>\nlon <span class=\"token operator\">=</span> <span class=\"token builtin\">float</span><span class=\"token punctuation\">(</span>options<span class=\"token punctuation\">.</span>find<span class=\"token punctuation\">(</span><span class=\"token string\">\"longitude\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">)</span> \n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span> <span class=\"token operator\">*</span>lon<span class=\"token punctuation\">)</span></code></pre></div>\n<p>You can do much more with xml files, but for simple option parsing this should be more than sufficient.</p>","tableOfContents":"<ul>\n<li>\n<p><a href=\"/docs/python/Python_OptionsAndInput/#options-parsing\">Options Parsing</a></p>\n<ul>\n<li><a href=\"/docs/python/Python_OptionsAndInput/#xml-files\">XML files</a></li>\n</ul>\n</li>\n</ul>","fields":{"slug":"/docs/python/Python_OptionsAndInput/"},"frontmatter":{"title":"Options Parsing","date":null,"description":"Options parsing with python"}},"allMarkdownRemark":{"totalCount":24,"edges":[{"node":{"excerpt":"Some Generic Description","fields":{"slug":"/docs/book1/"},"frontmatter":{"date":null,"title":"Book 1","description":"Lorem Ipsum","tags":["Book"]}}},{"node":{"excerpt":"Some Generic Description","fields":{"slug":"/docs/book2/"},"frontmatter":{"date":null,"title":"Book 2","description":"Lorem Ipsum","tags":["Book"]}}},{"node":{"excerpt":"First Part Vivamus lectus ligula, facilisis in mauris nec, interdum dapibus ligula. Maecenas pellentesque tristique ante quis eleifend…","fields":{"slug":"/docs/book1/introduction/"},"frontmatter":{"date":null,"title":"Introduction","description":"Lorem Ipsum","tags":["markdown","math","floats"]}}},{"node":{"excerpt":"First Part Vivamus lectus ligula, facilisis in mauris nec, interdum dapibus ligula. Maecenas pellentesque tristique ante quis eleifend…","fields":{"slug":"/docs/book1/second/"},"frontmatter":{"date":null,"title":"Second Chapter","description":"Lorem Ipsum","tags":["markdown","math","floats"]}}},{"node":{"excerpt":"First Part Vivamus lectus ligula, facilisis in mauris nec, interdum dapibus ligula. Maecenas pellentesque tristique ante quis eleifend…","fields":{"slug":"/docs/book1/third/"},"frontmatter":{"date":null,"title":"Third Chapter","description":"Lorem Ipsum","tags":["markdown","math","floats"]}}},{"node":{"excerpt":"First Part Vivamus lectus ligula, facilisis in mauris nec, interdum dapibus ligula. Maecenas pellentesque tristique ante quis eleifend…","fields":{"slug":"/docs/book2/introduction/"},"frontmatter":{"date":null,"title":"Introduction","description":"Lorem Ipsum","tags":["markdown","math","floats"]}}},{"node":{"excerpt":"First Part Vivamus lectus ligula, facilisis in mauris nec, interdum dapibus ligula. Maecenas pellentesque tristique ante quis eleifend…","fields":{"slug":"/docs/book2/second/"},"frontmatter":{"date":null,"title":"Second Chapter","description":"Lorem Ipsum","tags":["markdown","math","floats"]}}},{"node":{"excerpt":"Introduction Now that you have a python setup, it is time to see what it can do. The following instructions will assume you have Anaconda…","fields":{"slug":"/docs/python/01_GettingToKnowYourPythonSetup/"},"frontmatter":{"date":null,"title":"Getting To Know Your Python Setup","description":"A quick overview of the spyder IDE and a first code example.","tags":["python","spyder","beginner"]}}},{"node":{"excerpt":"First Part Vivamus lectus ligula, facilisis in mauris nec, interdum dapibus ligula. Maecenas pellentesque tristique ante quis eleifend…","fields":{"slug":"/docs/book2/third/"},"frontmatter":{"date":null,"title":"Third Chapter","description":"Lorem Ipsum","tags":["markdown","math","floats"]}}},{"node":{"excerpt":"Some Generic Description","fields":{"slug":"/docs/python/"},"frontmatter":{"date":null,"title":"Python","description":"python","tags":["python"]}}},{"node":{"excerpt":"Introduction This is the first of our python tutorials on Canvas for 2MMN40. These tutorials are not meant as a complete reference. What…","fields":{"slug":"/docs/python/02_Python_basics/"},"frontmatter":{"date":null,"title":"Basic Python, Lists, Strings, Math, Controlstatements and Functions","description":"A minimal overview of the basic python features.","tags":["python","basics","programming"]}}},{"node":{"excerpt":"Introduction In this course we will build a Molecular Dynamics (MD) engine in python 3. On this page we will show you how to setup python…","fields":{"slug":"/docs/python/00_SettingUpPython/"},"frontmatter":{"date":null,"title":"Setting Up Python","description":"How to install python","tags":["install","python","anaconda"]}}},{"node":{"excerpt":"Vivamus lectus ligula, facilisis in mauris nec, interdum dapibus ligula. Maecenas pellentesque tristique ante quis eleifend. Aenean ac…","fields":{"slug":"/docs/book1/third/0codeblockSub/"},"frontmatter":{"date":null,"title":"3.1","description":"Lorem Ipsum","tags":["markdown","math","floats"]}}},{"node":{"excerpt":"Vivamus lectus ligula, facilisis in mauris nec, interdum dapibus ligula. Maecenas pellentesque tristique ante quis eleifend. Aenean ac…","fields":{"slug":"/docs/book1/second/0codeblockSub/"},"frontmatter":{"date":null,"title":"2.1","description":"Lorem Ipsum","tags":["markdown","math","floats"]}}},{"node":{"excerpt":"Vivamus lectus ligula, facilisis in mauris nec, interdum dapibus ligula. Maecenas pellentesque tristique ante quis eleifend. Aenean ac…","fields":{"slug":"/docs/book1/second/1codeblockSub/"},"frontmatter":{"date":null,"title":"2.2","description":"Lorem Ipsum","tags":["markdown","math","floats"]}}},{"node":{"excerpt":"Introduction NumPy is an extension of python specifically designed for doing numeric computations. The two main features of the package are…","fields":{"slug":"/docs/python/03_Numpy_basics/"},"frontmatter":{"date":null,"title":"Numpy Basics","description":"A brief overview of the most important numpy features for Scientific Computing.","tags":["python","numpy","spyder","basics"]}}},{"node":{"excerpt":"Vivamus lectus ligula, facilisis in mauris nec, interdum dapibus ligula. Maecenas pellentesque tristique ante quis eleifend. Aenean ac…","fields":{"slug":"/docs/book2/second/0codeblockSub/"},"frontmatter":{"date":null,"title":"2.1","description":"Lorem Ipsum","tags":["markdown","math","floats"]}}},{"node":{"excerpt":"File IO To start we need a file, copy paste the following into a file called  that you save in the same folder as your python script…","fields":{"slug":"/docs/python/Python_FileIO_StringFormatting/"},"frontmatter":{"date":null,"title":"File IO and String Formatting","description":"Basic FileIO with python","tags":["python","fileIO"]}}},{"node":{"excerpt":"Vivamus lectus ligula, facilisis in mauris nec, interdum dapibus ligula. Maecenas pellentesque tristique ante quis eleifend. Aenean ac…","fields":{"slug":"/docs/book2/second/1codeblockSub/"},"frontmatter":{"date":null,"title":"2.2","description":"Lorem Ipsum","tags":["markdown","math","floats"]}}},{"node":{"excerpt":"Options Parsing There might be a moment during this course in which you would like to specify options for your program. For example you…","fields":{"slug":"/docs/python/Python_OptionsAndInput/"},"frontmatter":{"date":null,"title":"Options Parsing","description":"Options parsing with python","tags":["xml","python","optionparsing"]}}},{"node":{"excerpt":"Vivamus lectus ligula, facilisis in mauris nec, interdum dapibus ligula. Maecenas pellentesque tristique ante quis eleifend. Aenean ac…","fields":{"slug":"/docs/book2/third/0codeblockSub/"},"frontmatter":{"date":null,"title":"3.1","description":"Lorem Ipsum","tags":["markdown","math","floats"]}}},{"node":{"excerpt":"Introduction As you start to write more and more code, it becomes important to organize that code. There are many ways to do this and many…","fields":{"slug":"/docs/python/Python_OrganizingALargeProject/"},"frontmatter":{"date":null,"title":"Organizing Code","description":"Functional and Procedural programming, python modules.","tags":["python","largeproject"]}}},{"node":{"excerpt":"Introduction Here we will discuss some basics of the software package named Visual Molecular\nDynamics (VMD). It can be used to make fancy…","fields":{"slug":"/docs/python/VMD_basics/"},"frontmatter":{"date":null,"title":"VMD A very basic tutorial","description":"VMD install and brief tutorial","tags":["vmd","molecules"]}}},{"node":{"excerpt":"Python Resources Here is a list of great sources of information for python, numpy and matplotlib. The Official Python Tutorial If you want a…","fields":{"slug":"/docs/python/Python_online_resources/"},"frontmatter":{"date":null,"title":"How to Learn Python Resources","description":"Sources to learn python","tags":["python","resources"]}}}]}},"pageContext":{"slug":"/docs/python/Python_OptionsAndInput/","previous":{"fields":{"slug":"/docs/book2/third/0codeblockSub/"},"frontmatter":{"title":"3.1","tags":["markdown","math","floats"]}},"next":{"fields":{"slug":"/docs/book2/second/1codeblockSub/"},"frontmatter":{"title":"2.2","tags":["markdown","math","floats"]}}}},"staticQueryHashes":["1163865869","63159454"]}