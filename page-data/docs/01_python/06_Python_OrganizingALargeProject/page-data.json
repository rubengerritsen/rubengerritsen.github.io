{"componentChunkName":"component---src-templates-doc-post-js","path":"/docs/01_python/06_Python_OrganizingALargeProject/","result":{"data":{"site":{"siteMetadata":{"title":"rubengerritsen.nl","author":"Ruben Gerritsen"}},"markdownRemark":{"id":"23909ab0-8912-555e-92e4-bf554ceae94f","excerpt":"Introduction As you start to write more and more code, it becomes important to organize that code. There are many ways to do this and many levels on which you…","html":"<h1 id=\"introduction\" style=\"position:relative;\"><a href=\"#introduction\" aria-label=\"introduction permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Introduction</h1>\n<p>As you start to write more and more code, it becomes important to organize that code. There are many ways to do this and many levels on which you can organize. Here we will treat two, a functional/procedural approach for programming and python modules for spreading code over multiple files.</p>\n<h1 id=\"functional-and-procedural-programming\" style=\"position:relative;\"><a href=\"#functional-and-procedural-programming\" aria-label=\"functional and procedural programming permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Functional and Procedural Programming</h1>\n<p>The mathematical idea of a function is probably well known, you have some f(x), that outputs a value y. In programming we also have functions but it is important to realize that they are very different from mathematical functions. As an example the mathematical function y=f(x) has a clear input x and a clear output y, f itself won’t do anything strange to any other variables, in computer science this is called a pure function. </p>\n<p>Now take a look at the following piece of code and try to run it.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">number <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">square</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">global</span> number\n    number <span class=\"token operator\">+=</span> <span class=\"token number\">123</span>\n    <span class=\"token keyword\">return</span> x <span class=\"token operator\">*</span> x\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"number: </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>number<span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"the square of </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token number\">3.3</span><span class=\"token punctuation\">}</span></span><span class=\"token string\"> is </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>square<span class=\"token punctuation\">(</span><span class=\"token number\">3.3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"number: </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>number<span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Here we have a “function” that does what a math function does (i.e. take input and output something), but it also changes the global variable <code class=\"language-text\">number</code>. This is called a side effect of a function. The use of pure functions is known as functional programming and the use of functions with side effects is known as procedural programming (in a language such as C it is not uncommon to write functions that only have side effects and no outputs this is where the keyword <code class=\"language-text\">void</code> is used). Both functional and procedural programming can help you in organizing your code. Consider the following very basic example (that won’t work).</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">firstForce</span><span class=\"token punctuation\">(</span>pos<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  <span class=\"token triple-quoted-string string\">\"\"\" Some force computation. \"\"\"</span>\n  <span class=\"token keyword\">return</span> force\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">computeAcceleration</span><span class=\"token punctuation\">(</span>pos<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  <span class=\"token triple-quoted-string string\">\"\"\" A difficult formula to compute the acceleration. \"\"\"</span>\n  <span class=\"token keyword\">global</span> mass\n  force <span class=\"token operator\">=</span> firstForce<span class=\"token punctuation\">(</span>pos<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> secondForce<span class=\"token punctuation\">(</span>pos<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n  <span class=\"token keyword\">return</span> force<span class=\"token operator\">/</span>mass\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">integrator</span><span class=\"token punctuation\">(</span>pos<span class=\"token punctuation\">,</span> vel<span class=\"token punctuation\">,</span> dt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  <span class=\"token triple-quoted-string string\">\"\"\" I just made this up, doesn't do anything! \"\"\"</span>\n  a <span class=\"token operator\">=</span> computeAcceleration<span class=\"token punctuation\">(</span>pos<span class=\"token punctuation\">)</span>\n  vel <span class=\"token operator\">+=</span> a <span class=\"token operator\">*</span>dt\n  <span class=\"token keyword\">return</span> pos <span class=\"token operator\">+</span> vel <span class=\"token operator\">*</span> dt <span class=\"token operator\">+</span> a <span class=\"token operator\">*</span> dt <span class=\"token operator\">*</span> dt\n\n<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>t <span class=\"token operator\">&lt;=</span> endTime<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  x<span class=\"token punctuation\">[</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">[</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> integrator<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> dt<span class=\"token punctuation\">)</span>\n  t <span class=\"token operator\">+=</span> dt</code></pre></div>\n<p>Splitting the program in functions makes the program very easy to understand. You almost don’t need any comments because your function titles tell you what every piece of code does. This style for structuring code is well liked by many people, but obviously not the only way. You are free to take whatever approach you like.</p>\n<blockquote>\n<p>disclaimer: I hope it is obvious that this small discussion of functional and procedural programming is in no way exhaustive. There is way more to it, but that also lies way beyond the scope of this course.</p>\n</blockquote>\n<h1 id=\"multiple-files-python-modules\" style=\"position:relative;\"><a href=\"#multiple-files-python-modules\" aria-label=\"multiple files python modules permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Multiple Files (Python modules)</h1>\n<p>For all the details have a look at the <a href=\"https://docs.python.org/3/tutorial/modules.html\">documentation</a>. Here we present a minimal example.</p>\n<p>You can bundle python functions in modules. Modules are simply python files (i.e. <code class=\"language-text\">&lt;name&gt;.py</code>) with a collection of functions, an example <code class=\"language-text\">forces.py</code></p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">forceOne</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  <span class=\"token keyword\">return</span> <span class=\"token number\">1</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">forceTwo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  <span class=\"token keyword\">return</span> <span class=\"token number\">2</span></code></pre></div>\n<p>If you have this file saved, then in another python file (in the same directory) you can call this file with the <code class=\"language-text\">import</code> command.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> forces <span class=\"token comment\"># note you import only the file name without the extension</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>forces<span class=\"token punctuation\">.</span>forceOne<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>If you want to use a function from a module you need to use the <code class=\"language-text\">.</code>, accessing the function <code class=\"language-text\">forceOne()</code> from the module <code class=\"language-text\">forces</code> is done via <code class=\"language-text\">forces.forceOne()</code>. Sometimes your filename is to long and you don’t want to type it as a name for a module. Than you can use the <code class=\"language-text\">as</code> keyword, which you already know from <code class=\"language-text\">import numpy as np</code>.</p>","tableOfContents":"<ul>\n<li><a href=\"/docs/01_python/06_Python_OrganizingALargeProject/#introduction\">Introduction</a></li>\n<li><a href=\"/docs/01_python/06_Python_OrganizingALargeProject/#functional-and-procedural-programming\">Functional and Procedural Programming</a></li>\n<li><a href=\"/docs/01_python/06_Python_OrganizingALargeProject/#multiple-files-python-modules\">Multiple Files (Python modules)</a></li>\n</ul>","fields":{"slug":"/docs/01_python/06_Python_OrganizingALargeProject/"},"frontmatter":{"title":"Organizing Code"}},"allMarkdownRemark":{"totalCount":14,"edges":[{"node":{"excerpt":"In this chapter we introduce the main ideas of the many-body theory of\nmolecular systems. This theory is used to compute geometries and the…","fields":{"slug":"/docs/latexTest/"},"frontmatter":{"title":"Testing Latex Support","description":"Description","tags":null}}},{"node":{"excerpt":"This is a collection of python tutorials originally written for the Molecular Dynamics course 2MMN40 at\nthe TU/e.","fields":{"slug":"/docs/01_python/"},"frontmatter":{"title":"Python for Molecular Dynamics","description":"python","tags":["python"]}}},{"node":{"excerpt":"Introduction Here we will discuss some basics of the software package named Visual Molecular\nDynamics (VMD). It can be used to make fancy…","fields":{"slug":"/docs/02_VMD_basics/"},"frontmatter":{"title":"VMD A very basic tutorial","description":"VMD install and brief tutorial","tags":["vmd","molecules"]}}},{"node":{"excerpt":"A collection of notes.","fields":{"slug":"/docs/xx_miscellaneous/"},"frontmatter":{"title":"Miscellaneous","description":"A collection of notes about all kind of things.","tags":null}}},{"node":{"excerpt":"Introduction In this course we will build a Molecular Dynamics (MD) engine in python 3. On this page we will show you how to setup python…","fields":{"slug":"/docs/01_python/00_SettingUpPython/"},"frontmatter":{"title":"Setting Up Python","description":"How to install python","tags":["install","python","anaconda"]}}},{"node":{"excerpt":"Introduction Now that you have a python setup, it is time to see what it can do. The following instructions will assume you have Anaconda…","fields":{"slug":"/docs/01_python/01_GettingToKnowYourPythonSetup/"},"frontmatter":{"title":"Getting To Know Your Python Setup","description":"A quick overview of the spyder IDE and a first code example.","tags":["python","spyder","beginner"]}}},{"node":{"excerpt":"Introduction This is the first of our python tutorials on Canvas for 2MMN40. These tutorials are not meant as a complete reference. What…","fields":{"slug":"/docs/01_python/02_Python_basics/"},"frontmatter":{"title":"Basic Python, Lists, Strings, Math, Controlstatements and Functions","description":"A minimal overview of the basic python features.","tags":["python","basics","programming"]}}},{"node":{"excerpt":"Introduction NumPy is an extension of python specifically designed for doing numeric computations. The two main features of the package are…","fields":{"slug":"/docs/01_python/03_Numpy_basics/"},"frontmatter":{"title":"Numpy Basics","description":"A brief overview of the most important numpy features for Scientific Computing.","tags":["python","numpy","spyder","basics"]}}},{"node":{"excerpt":"There might be a moment during this course in which you would like to specify options for your program. For example you might want to pass…","fields":{"slug":"/docs/01_python/05_Python_OptionsAndInput/"},"frontmatter":{"title":"Options Parsing","description":"Options parsing with python","tags":["xml","python","optionparsing"]}}},{"node":{"excerpt":"To start we need a file, copy paste the following into a file called  that you save in the same folder as your python script. Reading To…","fields":{"slug":"/docs/01_python/04_Python_FileIO_StringFormatting/"},"frontmatter":{"title":"File IO and String Formatting","description":"Basic FileIO with python","tags":["python","fileIO"]}}},{"node":{"excerpt":"Introduction As you start to write more and more code, it becomes important to organize that code. There are many ways to do this and many…","fields":{"slug":"/docs/01_python/06_Python_OrganizingALargeProject/"},"frontmatter":{"title":"Organizing Code","description":"Functional and Procedural programming, python modules.","tags":["python","largeproject"]}}},{"node":{"excerpt":"Here is a list of great sources of information for python, numpy and matplotlib. The Official Python Tutorial If you want a good basis in…","fields":{"slug":"/docs/01_python/07_Python_online_resources/"},"frontmatter":{"title":"Python Resources","description":"Sources to learn python","tags":["python","resources"]}}},{"node":{"excerpt":"Using The Tests To enable tests run  and then  to actually build them or compile VOTCA with the option enabled. To run all the unit tests…","fields":{"slug":"/docs/xx_miscellaneous/01_unitTest/"},"frontmatter":{"title":"Unit Testing in VOTCA","description":"Unit Testing in VOTCA","tags":null}}},{"node":{"excerpt":"This markdown file is an extended version of the standard Markdown Cheatsheet often used as a reference, test and showcase. Hence presented…","fields":{"slug":"/docs/xx_miscellaneous/MarkdownRef/"},"frontmatter":{"title":"Markdown Reference","description":"A markdown reference cheat.","tags":["markdown","math","floats"]}}}]}},"pageContext":{"slug":"/docs/01_python/06_Python_OrganizingALargeProject/","previous":{"fields":{"slug":"/docs/01_python/07_Python_online_resources/"},"frontmatter":{"title":"Python Resources","tags":["python","resources"]}},"next":{"fields":{"slug":"/docs/01_python/04_Python_FileIO_StringFormatting/"},"frontmatter":{"title":"File IO and String Formatting","tags":["python","fileIO"]}}}},"staticQueryHashes":["3200707273"]}