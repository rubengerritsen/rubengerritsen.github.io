{"componentChunkName":"component---src-templates-doc-post-js","path":"/docs/02_cmake/02_linux/","result":{"data":{"site":{"siteMetadata":{"title":"rubengerritsen.nl","author":"Ruben Gerritsen"}},"markdownRemark":{"id":"b2d12674-4270-58e9-bd1b-3a3d7b08e4d2","excerpt":"On this page we discuss how to setup a basic C++ project with CMake for\nscientific computing. It will use the Boost, Eigen and OpenMP libraries, to\nprovide…","html":"<p>On this page we discuss how to setup a basic C++ project with CMake for\nscientific computing. It will use the Boost, Eigen and OpenMP libraries, to\nprovide general functionality, linear algebra and parallel programming\nrespectively. The main goal of this tutorial is to get you to a point where\ncompiling, linking and running your scientific computing project will be nothing\nmore than one or two commands on the command line, such that you can fully focus\non writing code and getting results instead of wasting time on the build process.</p>\n<h1 id=\"getting-the-dependencies\" style=\"position:relative;\"><a href=\"#getting-the-dependencies\" aria-label=\"getting the dependencies permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Getting the dependencies</h1>\n<p>Before we can do anything we need to get and install all the dependencies. We need</p>\n<ol>\n<li>An IDE or text editor</li>\n<li>CMake</li>\n<li>Boost</li>\n<li>Eigen3</li>\n</ol>\n<p>The text editor can be of your own choice a highly recommended editor is Visual Studio Code. To install the dependencies on a Ubuntu based distro run</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">apt-get</span> <span class=\"token function\">install</span> -y <span class=\"token function\">make</span> cmake libeigen3-dev libboost-all-dev</code></pre></div>\n<p>Note that you will already have all these packages installed if you use software like the VOTCA project.</p>\n<h1 id=\"setting-up-a-default-c-project\" style=\"position:relative;\"><a href=\"#setting-up-a-default-c-project\" aria-label=\"setting up a default c project permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Setting up a Default C++ Project</h1>\n<p>Small and medium sized C++ projects almost always have the same basic file and folder structure. There is an <code class=\"language-text\">include</code> directory for the headers (.h), a source directory (often called <code class=\"language-text\">src</code>) for the source code files (.cpp) and a build folder for the build files that are generated by CMake and optionally a bin folder where the final binary is installed.</p>\n<p>Every C++ project starts with such a basic layout of files and folders. To get started create the following file and folder structure in some folder on your computer. I have created this example in my home directory in a folder called <code class=\"language-text\">exampleProject</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">exampleProject\n├── build\n├── include\n├── src\n│   └── main.cpp\n├── .gitignore\n└── CMakeLists.txt</code></pre></div>\n<p>The <code class=\"language-text\">main.cpp</code>, <code class=\"language-text\">.gitignore</code> and <code class=\"language-text\">CMakeLists.txt</code> can be empty text files for now.</p>\n<h1 id=\"hello-world-with-c-and-cmake\" style=\"position:relative;\"><a href=\"#hello-world-with-c-and-cmake\" aria-label=\"hello world with c and cmake permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Hello World (with C++ and CMake)</h1>\n<p>Now that we have the basic file and folder structure lets compile an example. We\nstart off with a simple <em>Hello World</em> program.</p>\n<h2 id=\"source-code\" style=\"position:relative;\"><a href=\"#source-code\" aria-label=\"source code permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Source Code</h2>\n<p>In the <code class=\"language-text\">main.cpp</code> text file copy paste the following code. We don’t care about what the code does or how it does it, if you want to know about that follow a basic C++ tutorial somewhere on the web. The focus here is on compiling and linking and making that as quick and painless as possible.</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    std<span class=\"token operator\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Hello World!\"</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token operator\">::</span>endl<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"cmakeliststxt\" style=\"position:relative;\"><a href=\"#cmakeliststxt\" aria-label=\"cmakeliststxt permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>CMakeLists.txt</h2>\n<p>Now that we have some code to compile, let’s look at how we can use CMake to\nthis. What we need to do is create a <code class=\"language-text\">CMakeLists.txt</code> file, if you followed the\ninstructions above you have already made it. Copy paste the following code into that\nfile. The example file is well commented to explain exactly what every line of\nCMake code does.</p>\n<div class=\"gatsby-highlight\" data-language=\"cmake\"><pre class=\"language-cmake\"><code class=\"language-cmake\"><span class=\"token comment\"># Sets the minimum required version of CMake to 3.8</span>\n<span class=\"token keyword\">cmake_minimum_required</span> <span class=\"token punctuation\">(</span><span class=\"token property\">VERSION</span> <span class=\"token number\">3.8</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># sets the projects name</span>\n<span class=\"token keyword\">project</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"example\"</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># There are many different C++ versions labeled by their release year here we</span>\n<span class=\"token comment\"># will use the one from 2014 for compatibility with the VOTCA-XTP project. You</span>\n<span class=\"token comment\"># are free to use a more recent C++ version if you need the features</span>\n<span class=\"token keyword\">set</span><span class=\"token punctuation\">(</span><span class=\"token variable\">CMAKE_CXX_STANDARD</span> <span class=\"token number\">14</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># If 14 is not available we want an error, this is done by setting it as</span>\n<span class=\"token comment\"># required You will see the REQUIRED keyword more often, it is always used to</span>\n<span class=\"token comment\"># raise an error if a specific function, module, package etc. can't be used.</span>\n<span class=\"token keyword\">set</span><span class=\"token punctuation\">(</span><span class=\"token variable\">CMAKE_CXX_STANDARD_REQUIRED</span> True<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># Here we specify the folders where the compiler should look for include files.</span>\n<span class=\"token comment\"># We have created an include folder specifically for this purpose, so we add it</span>\n<span class=\"token comment\"># here</span>\n<span class=\"token keyword\">include_directories</span><span class=\"token punctuation\">(</span>include<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># To make compilation easy we want CMake to look for all possible .cpp files</span>\n<span class=\"token comment\"># that should be compiled. We do this with a \"GLOB\", it is a way of writing</span>\n<span class=\"token comment\"># generic # file names. For example the GLOB \"src/*.cpp\" translates to every</span>\n<span class=\"token comment\"># file in the src folder that ends with .cpp, the asterix (*) is called a wild</span>\n<span class=\"token comment\"># card, it matches any possible string.</span>\n<span class=\"token keyword\">file</span><span class=\"token punctuation\">(</span>GLOB <span class=\"token property\">SOURCES</span> <span class=\"token string\">\"src/*.cpp\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># after this command all source files (.cpp) are collected in the variable</span>\n<span class=\"token comment\"># SOURCES</span>\n\n<span class=\"token comment\"># Now we create an executable (the actual program) named *example*, we want it</span>\n<span class=\"token comment\"># to use all the source files. We need ${variable} to access the contents of a</span>\n<span class=\"token comment\"># variable, hence ${SOURCES} gives all the sources collected with the GLOB</span>\n<span class=\"token comment\"># expression above.</span>\n<span class=\"token keyword\">add_executable</span> <span class=\"token punctuation\">(</span>example <span class=\"token punctuation\">${</span><span class=\"token property\">SOURCES</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># This line copies the created binaries (in this case only one) to the</span>\n<span class=\"token comment\"># installation location. The destination here is the bin folder. Depending on</span>\n<span class=\"token comment\"># which options CMake gets, this is either the /usr/local/bin (default) or the</span>\n<span class=\"token comment\"># bin folder of the CMAKE_INSTALL_PREFIX option.</span>\n<span class=\"token keyword\">install</span><span class=\"token punctuation\">(</span>TARGETS example DESTINATION bin<span class=\"token punctuation\">)</span></code></pre></div>\n<h2 id=\"building-a-cmake-project\" style=\"position:relative;\"><a href=\"#building-a-cmake-project\" aria-label=\"building a cmake project permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Building A CMake Project</h2>\n<p>All CMake projects are build in more or less the same way. First the project needs to be configured, that is done with the following command</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">cmake -Bbuild_dir -DCMAKE_INSTALL_PREFIX<span class=\"token operator\">=</span>./ <span class=\"token builtin class-name\">.</span></code></pre></div>\n<p>This calls CMake and tells it to configure the current folder, <code class=\"language-text\">.</code>, as a CMake project, the configuration/build files will be written to the build directory, which is indicated with the <code class=\"language-text\">-B</code> flag and is called <code class=\"language-text\">build_dir</code> in this example. The <code class=\"language-text\">-DCMAKE_INSTALL_PREFIX=./</code> option tells the program to install the binaries to the current folder <code class=\"language-text\">./</code>, but you can specify any location on your computer, if you do not provide an install location, the default (<code class=\"language-text\">/usr/local/bin</code>) will be used. After running this command you will get all configuration info printed to the console, it can be interesting to inspect and see which compiler is used, which packages are found etc.</p>\n<p>After configuring the project we need to actually build it. This is done using</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">cmake --build build_dir --parallel <span class=\"token operator\">&lt;</span>nrOfThreadsToUse<span class=\"token operator\">></span></code></pre></div>\n<p>which calls CMake and tells it to build the project based on the build files in <code class=\"language-text\">build-dir</code> using <code class=\"language-text\">&lt;nrOfThreadsToUse&gt;</code> threads to do so. If you don’t want your code to compile quickly (which would be stupid), you can run it without the <code class=\"language-text\">--parallel</code> option.</p>\n<p>Finally to install a CMake project we run</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">cmake --build build_dir --target <span class=\"token function\">install</span></code></pre></div>\n<p>Which will copy the binaries (and possibly other files if you specified them) to\ntheir install location.</p>\n<p>Note that the last two commands can be combined into one, like this</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">cmake --build build_dir --parallel <span class=\"token operator\">&lt;</span>nrOfThreadsToUse<span class=\"token operator\">></span> --target <span class=\"token function\">install</span></code></pre></div>\n<p>To finally run your program navigate to the bin folder and there you find the\nexecutable to run. If you followed this example it will be called <code class=\"language-text\">example</code>,\nsimply type <code class=\"language-text\">./example</code> to run it, it should print <code class=\"language-text\">Hello World!</code> now.</p>\n<p>What we have done so far probably seems like a lot of work to compile a single\nsource file, and it is. But the nice thing is that it does not only work for a single source file, every source file in <code class=\"language-text\">src</code> and every header in <code class=\"language-text\">include</code> will be automatically compiled with this CMake procedure, try it out! Define some headers and more source files and see what happens.</p>\n<h1 id=\"using-eigen-boost-and-openmp\" style=\"position:relative;\"><a href=\"#using-eigen-boost-and-openmp\" aria-label=\"using eigen boost and openmp permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Using Eigen, Boost and OpenMP</h1>\n<p>Where CMake really shines is linking to existing code and libraries. CMake can find the location of libraries for us and link against them almost completely automatically.</p>\n<p>Consider the following program, that doesn’t do anything useful, but depends on Eigen, Boost and OpenMP.\nCopy paste it into the <code class=\"language-text\">main.cpp</code> file.</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;Eigen/Dense></span> <span class=\"token comment\">// Needed to acces Eigen3's vectors and matrices</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;boost/format.hpp></span> <span class=\"token comment\">// Needed to acces Boosts formatter</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;omp.h></span> <span class=\"token comment\">// Needed for the parallel tools from OpenMP</span></span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">/*****************/</span>\n  <span class=\"token comment\">/* USING EIGEN 3 */</span>\n  <span class=\"token comment\">/*****************/</span>\n  <span class=\"token comment\">// create a 3-vector (1,2,3)</span>\n  Eigen<span class=\"token operator\">::</span>Vector3d vec<span class=\"token punctuation\">;</span>\n  vec <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n  std<span class=\"token operator\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Print the vector\"</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token operator\">::</span>endl<span class=\"token punctuation\">;</span>\n  std<span class=\"token operator\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> mat <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token operator\">::</span>endl<span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// create a 3x3 matrix</span>\n  Eigen<span class=\"token operator\">::</span>Matrix3d mat<span class=\"token punctuation\">;</span>\n  mat <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span><span class=\"token number\">9</span><span class=\"token punctuation\">;</span>\n  std<span class=\"token operator\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Print the matrix\"</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token operator\">::</span>endl<span class=\"token punctuation\">;</span>\n  std<span class=\"token operator\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> mat <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token operator\">::</span>endl<span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// Compute the product</span>\n  std<span class=\"token operator\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"This is their product\"</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token operator\">::</span>endl<span class=\"token punctuation\">;</span>\n  std<span class=\"token operator\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> mat <span class=\"token operator\">*</span> vec <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token operator\">::</span>endl<span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">/*****************/</span>\n  <span class=\"token comment\">/* USING BOOST   */</span>\n  <span class=\"token comment\">/*****************/</span>\n  std<span class=\"token operator\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> boost<span class=\"token operator\">::</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"This will be a formatted number: %1.4f\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span>\n                 <span class=\"token number\">1.67329587</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">/**************************/</span>\n  <span class=\"token comment\">/* An OpenMP EXAMPLE      */</span>\n  <span class=\"token comment\">/**************************/</span>\n  <span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> size <span class=\"token operator\">=</span> <span class=\"token number\">25600</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">double</span> sinTable<span class=\"token punctuation\">[</span>size<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// We use half the available threads, just to see what it does in the task</span>\n  <span class=\"token comment\">// manager or htop. For a heavy application you would want to use as many as possible</span>\n  <span class=\"token keyword\">int</span> maxThreads <span class=\"token operator\">=</span> <span class=\"token function\">omp_get_max_threads</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">int</span> nrOfThreadsToUse <span class=\"token operator\">=</span> maxThreads <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n  <span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">pragma</span> <span class=\"token expression\">omp parallel <span class=\"token keyword\">for</span> <span class=\"token function\">num_threads</span><span class=\"token punctuation\">(</span>nrOfThreadsToUse<span class=\"token punctuation\">)</span></span></span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> n <span class=\"token operator\">&lt;</span> size<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// What we do here is useless, but it takes some time</span>\n    <span class=\"token comment\">// so you can inspect windows task manager (windows), debug panel or htop(Linux)</span>\n    <span class=\"token comment\">// to see that the for loop is run over multiple cores at the same time.</span>\n    sinTable<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> std<span class=\"token operator\">::</span><span class=\"token function\">sin</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span> <span class=\"token operator\">*</span> <span class=\"token number\">3.14</span> <span class=\"token operator\">*</span> n <span class=\"token operator\">/</span> size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n2 <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> n2 <span class=\"token operator\">&lt;</span> size<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>n2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      sinTable<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span> <span class=\"token operator\">+=</span> std<span class=\"token operator\">::</span><span class=\"token function\">sin</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span> <span class=\"token operator\">*</span> <span class=\"token number\">3.14</span> <span class=\"token operator\">*</span> n <span class=\"token operator\">/</span> size<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> n2<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>To let CMake know that we want to compile this file using Eigen, Boost and OpenMP we need to adapt the <code class=\"language-text\">CMakeLists.txt</code> file. What follows is the updated CMake file with comments explaining what is going on.</p>\n<div class=\"gatsby-highlight\" data-language=\"cmake\"><pre class=\"language-cmake\"><code class=\"language-cmake\"><span class=\"token keyword\">cmake_minimum_required</span> <span class=\"token punctuation\">(</span><span class=\"token property\">VERSION</span> <span class=\"token number\">3.8</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">project</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"example\"</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">set</span><span class=\"token punctuation\">(</span><span class=\"token variable\">CMAKE_CXX_STANDARD</span> <span class=\"token number\">14</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">set</span><span class=\"token punctuation\">(</span><span class=\"token variable\">CMAKE_CXX_STANDARD_REQUIRED</span> True<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># The nice thing about CMake is that it can find dependecies for us and handle</span>\n<span class=\"token comment\"># the linking and include files, to find a package we do the following</span>\n<span class=\"token keyword\">find_package</span><span class=\"token punctuation\">(</span>Eigen3 <span class=\"token number\">3.3</span> REQUIRED<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">find_package</span><span class=\"token punctuation\">(</span>Boost REQUIRED<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">find_package</span><span class=\"token punctuation\">(</span>OpenMP<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># Besides our own include directory also Boost has one, since we used CMake to</span>\n<span class=\"token comment\"># find the package for us, the include folder is stored in ${Boost_INCLUDE_DIRS}</span>\n<span class=\"token comment\"># so our include directories are our own include directory and the Boost ones.</span>\n<span class=\"token keyword\">include_directories</span><span class=\"token punctuation\">(</span>include <span class=\"token punctuation\">${</span>Boost_INCLUDE_DIRS<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">file</span><span class=\"token punctuation\">(</span>GLOB <span class=\"token property\">SOURCES</span> <span class=\"token string\">\"src/*.cpp\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">add_executable</span> <span class=\"token punctuation\">(</span>example <span class=\"token punctuation\">${</span><span class=\"token property\">SOURCES</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># Since we use external libraries, we need to link our executable to them.</span>\n<span class=\"token comment\"># Here we link agains Eigen, Boost and OpenMP.</span>\n<span class=\"token comment\"># The PUBLIC keyword is used to specify the type of interface, in most cases PUBLIC</span>\n<span class=\"token comment\"># will be fine.</span>\n<span class=\"token keyword\">target_link_libraries</span><span class=\"token punctuation\">(</span>example <span class=\"token namespace\">PUBLIC</span> <span class=\"token inserted class-name\">Eigen3::Eigen</span> <span class=\"token punctuation\">${</span>Boost_LIBRARIES<span class=\"token punctuation\">}</span> <span class=\"token inserted class-name\">OpenMP::OpenMP_CXX</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">install</span><span class=\"token punctuation\">(</span>TARGETS example DESTINATION bin<span class=\"token punctuation\">)</span></code></pre></div>\n<p>If you now rebuild the project with CMake with the commands explained above, the\nproject will be automatically compiled and linked with the correct libraries. </p>\n<h1 id=\"when-things-go-wrong\" style=\"position:relative;\"><a href=\"#when-things-go-wrong\" aria-label=\"when things go wrong permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>When things go wrong</h1>\n<p>Sometimes things go wrong with CMake, to reconfigure you project completely from scratch, you can simply delete the build folder and start over. For larger projects that is not the smartest idea, because rebuilding everything might take quite some time. Instead you can navigate to the build folder and only delete the <code class=\"language-text\">CMakeCache.txt</code> file. If you then reconfigure CMake, it will reconfigure from scratch, but everything that is already build will not be rebuild.</p>\n<h1 id=\"speeding-things-up-even-more\" style=\"position:relative;\"><a href=\"#speeding-things-up-even-more\" aria-label=\"speeding things up even more permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Speeding Things Up Even More</h1>\n<p>We have used CMake now to take care of the whole build process (compiling, linking etc.) and once the <code class=\"language-text\">CMakeLists.txt</code> file is created we don’t have to think about it anymore. For the linux power users we can take everything one step further, by scripting the CMake commands.</p>\n<p>Consider the following example script</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token shebang important\">#!/bin/bash</span>\ncmake -Bbuild_dir -DCMAKE_INSTALL_PREFIX<span class=\"token operator\">=</span>./ <span class=\"token builtin class-name\">.</span> <span class=\"token operator\">||</span> <span class=\"token builtin class-name\">exit</span> <span class=\"token number\">1</span>\ncmake --build build_dir --parallel <span class=\"token number\">6</span> --target <span class=\"token function\">install</span> <span class=\"token operator\">||</span> <span class=\"token builtin class-name\">exit</span> <span class=\"token number\">1</span> \nbin/example</code></pre></div>\n<p>if we save this in a file called <code class=\"language-text\">run</code> in the main directory and make it executable with <code class=\"language-text\">chmod +x</code>, we can simply type <code class=\"language-text\">./run</code> to configure, build, install and run our project and we don’t have to worry about anything related to the build process anymore.</p>","tableOfContents":"<ul>\n<li><a href=\"/docs/02_cmake/02_linux/#getting-the-dependencies\">Getting the dependencies</a></li>\n<li><a href=\"/docs/02_cmake/02_linux/#setting-up-a-default-c-project\">Setting up a Default C++ Project</a></li>\n<li>\n<p><a href=\"/docs/02_cmake/02_linux/#hello-world-with-c-and-cmake\">Hello World (with C++ and CMake)</a></p>\n<ul>\n<li><a href=\"/docs/02_cmake/02_linux/#source-code\">Source Code</a></li>\n<li><a href=\"/docs/02_cmake/02_linux/#cmakeliststxt\">CMakeLists.txt</a></li>\n<li><a href=\"/docs/02_cmake/02_linux/#building-a-cmake-project\">Building A CMake Project</a></li>\n</ul>\n</li>\n<li><a href=\"/docs/02_cmake/02_linux/#using-eigen-boost-and-openmp\">Using Eigen, Boost and OpenMP</a></li>\n<li><a href=\"/docs/02_cmake/02_linux/#when-things-go-wrong\">When things go wrong</a></li>\n<li><a href=\"/docs/02_cmake/02_linux/#speeding-things-up-even-more\">Speeding Things Up Even More</a></li>\n</ul>","fields":{"slug":"/docs/02_cmake/02_linux/"},"frontmatter":{"title":"CMake and C++ on Linux","description":"How to setup a basic C++ project with CMake for scientific computing.","thumbnail":null}},"allMarkdownRemark":{"totalCount":17,"edges":[{"node":{"excerpt":"Introduction Here we will discuss some basics of the software package named Visual Molecular\nDynamics (VMD). It can be used to make fancy…","fields":{"slug":"/docs/03_VMD_basics/"},"frontmatter":{"title":"VMD A very basic tutorial","description":"VMD install and brief tutorial","tags":["vmd","molecules"]}}},{"node":{"excerpt":"C++ is a great language for scientific computing. For most people, however, getting started with C++ is a big hurdle. Most people think that…","fields":{"slug":"/docs/02_cmake/"},"frontmatter":{"title":"CMake and C++ for Scientific Computing","description":"How to setup a basic C++ project with CMake for scientific computing.","tags":["c++","cmake"]}}},{"node":{"excerpt":"This is a collection of python tutorials originally written for the Molecular Dynamics course 2MMN40 at\nthe TU/e.","fields":{"slug":"/docs/01_python/"},"frontmatter":{"title":"Python for Molecular Dynamics","description":"python","tags":["python"]}}},{"node":{"excerpt":"In this chapter we introduce the main ideas of the many-body theory of\nmolecular systems. This theory is used to compute geometries and the…","fields":{"slug":"/docs/latexTest/"},"frontmatter":{"title":"Testing Latex Support","description":"Description","tags":null}}},{"node":{"excerpt":"A collection of notes.","fields":{"slug":"/docs/xx_miscellaneous/"},"frontmatter":{"title":"Miscellaneous","description":"A collection of notes about all kind of things.","tags":null}}},{"node":{"excerpt":"Introduction In this course we will build a Molecular Dynamics (MD) engine in python 3. On this page we will show you how to setup python…","fields":{"slug":"/docs/01_python/00_SettingUpPython/"},"frontmatter":{"title":"Setting Up Python","description":"How to install python","tags":["install","python","anaconda"]}}},{"node":{"excerpt":"Introduction Now that you have a python setup, it is time to see what it can do. The following instructions will assume you have Anaconda…","fields":{"slug":"/docs/01_python/01_GettingToKnowYourPythonSetup/"},"frontmatter":{"title":"Getting To Know Your Python Setup","description":"A quick overview of the spyder IDE and a first code example.","tags":["python","spyder","beginner"]}}},{"node":{"excerpt":"Introduction This is the first of our python tutorials on Canvas for 2MMN40. These tutorials are not meant as a complete reference. What…","fields":{"slug":"/docs/01_python/02_Python_basics/"},"frontmatter":{"title":"Basic Python, Lists, Strings, Math, Controlstatements and Functions","description":"A minimal overview of the basic python features.","tags":["python","basics","programming"]}}},{"node":{"excerpt":"Introduction NumPy is an extension of python specifically designed for doing numeric computations. The two main features of the package are…","fields":{"slug":"/docs/01_python/03_Numpy_basics/"},"frontmatter":{"title":"Numpy Basics","description":"A brief overview of the most important numpy features for Scientific Computing.","tags":["python","numpy","spyder","basics"]}}},{"node":{"excerpt":"To start we need a file, copy paste the following into a file called  that you save in the same folder as your python script. Reading To…","fields":{"slug":"/docs/01_python/04_Python_FileIO_StringFormatting/"},"frontmatter":{"title":"File IO and String Formatting","description":"Basic FileIO with python","tags":["python","fileIO"]}}},{"node":{"excerpt":"Introduction As you start to write more and more code, it becomes important to organize that code. There are many ways to do this and many…","fields":{"slug":"/docs/01_python/06_Python_OrganizingALargeProject/"},"frontmatter":{"title":"Organizing Code","description":"Functional and Procedural programming, python modules.","tags":["python","largeproject"]}}},{"node":{"excerpt":"There might be a moment during this course in which you would like to specify options for your program. For example you might want to pass…","fields":{"slug":"/docs/01_python/05_Python_OptionsAndInput/"},"frontmatter":{"title":"Options Parsing","description":"Options parsing with python and XML files","tags":["xml","python","optionparsing"]}}},{"node":{"excerpt":"Here is a list of great sources of information for python, numpy and matplotlib. The Official Python Tutorial If you want a good basis in…","fields":{"slug":"/docs/01_python/07_Python_online_resources/"},"frontmatter":{"title":"Python Resources","description":"Sources to learn python","tags":["python","resources"]}}},{"node":{"excerpt":"Using The Tests To enable tests run  and then  to actually build them or compile VOTCA with the option enabled. To run all the unit tests…","fields":{"slug":"/docs/xx_miscellaneous/01_unitTest/"},"frontmatter":{"title":"Unit Testing in VOTCA","description":"Unit Testing in VOTCA","tags":null}}},{"node":{"excerpt":"This markdown file is an extended version of the standard Markdown Cheatsheet often used as a reference, test and showcase. Hence presented…","fields":{"slug":"/docs/xx_miscellaneous/MarkdownRef/"},"frontmatter":{"title":"Markdown Reference","description":"A markdown reference cheat.","tags":["markdown","math","floats"]}}},{"node":{"excerpt":"On this page we discuss how to setup and use a CMake and C++ project to do\nscientific computing. The start is a bit tedious, but once you…","fields":{"slug":"/docs/02_cmake/01_windows/"},"frontmatter":{"title":"CMake and C++ on Windows","description":"How to setup a basic C++ project with CMake for scientific computing.","tags":["c++","cmake","windows","boost","eigen3"]}}},{"node":{"excerpt":"On this page we discuss how to setup a basic C++ project with CMake for\nscientific computing. It will use the Boost, Eigen and OpenMP…","fields":{"slug":"/docs/02_cmake/02_linux/"},"frontmatter":{"title":"CMake and C++ on Linux","description":"How to setup a basic C++ project with CMake for scientific computing.","tags":["c++","cmake","linux"]}}}]}},"pageContext":{"slug":"/docs/02_cmake/02_linux/","previous":null,"next":{"fields":{"slug":"/docs/02_cmake/01_windows/"},"frontmatter":{"title":"CMake and C++ on Windows","tags":["c++","cmake","windows","boost","eigen3"]}}}},"staticQueryHashes":["3200707273","764694655"]}